/*
 * Copyright (C) 2018  Marco Bortolin
 *
 * This file is part of IBMulator.
 *
 * IBMulator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IBMulator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with IBMulator.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "ibmulator.h"
#include "../debugger.h"

/*
 *                 INT   AX      AX    decode decode                   description
 *                               size  ?      function
 */
int_map_t CPUDebugger::ms_interrupts = {
	/* INT 10 */
	{ MAKE_INT_SEL(0x10, 0x0000, 1), { true,  &CPUDebugger::INT_10_00, "VIDEO - SET VIDEO MODE" } },
	{ MAKE_INT_SEL(0x10, 0x0100, 1), { true,  nullptr,                 "VIDEO - SET TEXT-MODE CURSOR SHAPE" } },
	{ MAKE_INT_SEL(0x10, 0x0200, 1), { false, nullptr,                 "VIDEO - SET CURSOR POS" } },
	{ MAKE_INT_SEL(0x10, 0x0300, 1), { false, nullptr,                 "VIDEO - GET CURSOR POSITION AND SIZE" } },
	{ MAKE_INT_SEL(0x10, 0x0400, 1), { false, nullptr,                 "VIDEO - READ LIGHT PEN POSITION (except VGA)" } },
	{ MAKE_INT_SEL(0x10, 0x0500, 1), { false, nullptr,                 "VIDEO - SELECT ACTIVE DISPLAY PAGE" } },
	{ MAKE_INT_SEL(0x10, 0x0600, 1), { false, nullptr,                 "VIDEO - SCROLL UP WINDOW" } },
	{ MAKE_INT_SEL(0x10, 0x0700, 1), { false, nullptr,                 "VIDEO - SCROLL DOWN WINDOW" } },
	{ MAKE_INT_SEL(0x10, 0x0800, 1), { false, nullptr,                 "VIDEO - READ CHARACTER AND ATTRIBUTE AT CURSOR POSITION" } },
	{ MAKE_INT_SEL(0x10, 0x0900, 1), { false, &CPUDebugger::INT_10,    "VIDEO - WRITE CHAR AND ATTR AT CURSOR POS" } },
	{ MAKE_INT_SEL(0x10, 0x0A00, 1), { false, &CPUDebugger::INT_10,    "VIDEO - WRITE CHARACTER ONLY AT CURSOR POSITION" } },
	{ MAKE_INT_SEL(0x10, 0x0B00, 1), { false, nullptr,                 "VIDEO - SET BACKGROUND/BORDER COLOR - SET PALETTE" } },
	{ MAKE_INT_SEL(0x10, 0x0C00, 1), { false, nullptr,                 "VIDEO - WRITE GRAPHICS PIXEL" } },
	{ MAKE_INT_SEL(0x10, 0x0D00, 1), { false, nullptr,                 "VIDEO - READ GRAPHICS PIXEL" } },
	{ MAKE_INT_SEL(0x10, 0x0E00, 1), { false, &CPUDebugger::INT_10,    "VIDEO - TELETYPE OUTPUT" } },
	{ MAKE_INT_SEL(0x10, 0x0F00, 1), { true,  nullptr,                 "VIDEO - GET CURRENT VIDEO MODE" } },
	{ MAKE_INT_SEL(0x10, 0x1000, 2), { true,  nullptr,                 "VIDEO - SET SINGLE PALETTE REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0x1001, 2), { true,  nullptr,                 "VIDEO - SET BORDER (OVERSCAN) COLOR" } },
	{ MAKE_INT_SEL(0x10, 0x1002, 2), { true,  nullptr,                 "VIDEO - SET ALL PALETTE REGISTERS" } },
	{ MAKE_INT_SEL(0x10, 0x1003, 2), { true,  nullptr,                 "VIDEO - TOGGLE INTENSITY/BLINKING BIT" } },
	{ MAKE_INT_SEL(0x10, 0x1007, 2), { true,  nullptr,                 "VIDEO - GET INDIVIDUAL PALETTE REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0x1008, 2), { true,  nullptr,                 "VIDEO - READ OVERSCAN (BORDER COLOR) REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0x1009, 2), { true,  nullptr,                 "VIDEO - READ ALL PALETTE REGISTERS AND OVERSCAN REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0x1010, 2), { true,  nullptr,                 "VIDEO - SET INDIVIDUAL DAC REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0x1012, 2), { true,  nullptr,                 "VIDEO - SET BLOCK OF DAC REGISTERS" } },
	{ MAKE_INT_SEL(0x10, 0x1013, 2), { true,  nullptr,                 "VIDEO - SELECT VIDEO DAC COLOR PAGE" } },
	{ MAKE_INT_SEL(0x10, 0x1015, 2), { true,  nullptr,                 "VIDEO - READ INDIVIDUAL DAC REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0x1017, 2), { true,  nullptr,                 "VIDEO - READ BLOCK OF DAC REGISTERS" } },
	{ MAKE_INT_SEL(0x10, 0x1018, 2), { true,  nullptr,                 "VIDEO - SET PEL MASK" } },
	{ MAKE_INT_SEL(0x10, 0x1019, 2), { true,  nullptr,                 "VIDEO - READ PEL MASK" } },
	{ MAKE_INT_SEL(0x10, 0x101A, 2), { true,  nullptr,                 "VIDEO - GET VIDEO DAC COLOR-PAGE STATE" } },
	{ MAKE_INT_SEL(0x10, 0x101B, 2), { true,  nullptr,                 "VIDEO - PERFORM GRAY-SCALE SUMMING" } },
	{ MAKE_INT_SEL(0x10, 0x1100, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD USER-SPECIFIED PATTERNS" } },
	{ MAKE_INT_SEL(0x10, 0x1101, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD ROM MONOCHROME PATTERNS" } },
	{ MAKE_INT_SEL(0x10, 0x1102, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD ROM 8x8 DBL-DOT PATTERNS" } },
	{ MAKE_INT_SEL(0x10, 0x1103, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - SET BLOCK SPECIFIER" } },
	{ MAKE_INT_SEL(0x10, 0x1104, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD ROM 8x16 CHARACTER SET" } },
	{ MAKE_INT_SEL(0x10, 0x1110, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD USER-SPECIFIED PATTERNS" } },
	{ MAKE_INT_SEL(0x10, 0x1111, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD ROM MONOCHROME PATTERNS" } },
	{ MAKE_INT_SEL(0x10, 0x1112, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD ROM 8x8 DBL-DOT PATTERNS" } },
	{ MAKE_INT_SEL(0x10, 0x1114, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD ROM 8x16 CHARACTER SET" } },
	{ MAKE_INT_SEL(0x10, 0x1120, 2), { true,  nullptr,                 "VIDEO - GRAPH-MODE CHARGEN - SET USER 8x8 GRAPHICS CHARS" } },
	{ MAKE_INT_SEL(0x10, 0x1121, 2), { true,  nullptr,                 "VIDEO - GRAPH-MODE CHARGEN - SET USER GRAPHICS CHARACTERS" } },
	{ MAKE_INT_SEL(0x10, 0x1122, 2), { true,  nullptr,                 "VIDEO - GRAPH-MODE CHARGEN - SET ROM 8x14 GRAPHICS CHARS" } },
	{ MAKE_INT_SEL(0x10, 0x1123, 2), { true,  nullptr,                 "VIDEO - GRAPH-MODE CHARGEN - SET ROM 8x8 DOUBLE-DOT CHARS" } },
	{ MAKE_INT_SEL(0x10, 0x1124, 2), { true,  nullptr,                 "VIDEO - GRAPH-MODE CHARGEN - LOAD 8x16 GRAPHICS CHARS" } },
	{ MAKE_INT_SEL(0x10, 0x1130, 2), { true,  nullptr,                 "VIDEO - GET FONT INFORMATION" } },
	{ MAKE_INT_SEL(0x10, 0x1200, 1), { true,  &CPUDebugger::INT_10_12, "" } },
	{ MAKE_INT_SEL(0x10, 0x1300, 1), { true,  &CPUDebugger::INT_10,    "VIDEO - WRITE STRING" } },
	{ MAKE_INT_SEL(0x10, 0x1400, 2), { true,  nullptr,                 "VIDEO - LOAD USER-SPECIFIED LCD CHARACTER FONT" } },
	{ MAKE_INT_SEL(0x10, 0x1401, 2), { true,  nullptr,                 "VIDEO - LOAD SYSTEM ROM DEFAULT LCD CHARACTER FONT" } },
	{ MAKE_INT_SEL(0x10, 0x1402, 2), { true,  nullptr,                 "VIDEO - SET MAPPING OF LCD HIGH INTENSITY ATTRIBUTES" } },
	{ MAKE_INT_SEL(0x10, 0x1500, 1), { true,  nullptr,                 "VIDEO - GET PHYSICAL DISPLAY PARAMETERS" } },
	{ MAKE_INT_SEL(0x10, 0x1A00, 2), { true,  nullptr,                 "VIDEO - GET DISPLAY COMBINATION CODE" } },
	{ MAKE_INT_SEL(0x10, 0x1A01, 2), { true,  nullptr,                 "VIDEO - SET DISPLAY COMBINATION CODE" } },
	{ MAKE_INT_SEL(0x10, 0x1B00, 1), { true,  nullptr,                 "VIDEO - FUNCTIONALITY/STATE INFORMATION" } },
	{ MAKE_INT_SEL(0x10, 0x1C00, 1), { true,  nullptr,                 "VIDEO - SAVE/RESTORE VIDEO STATE" } },
	{ MAKE_INT_SEL(0x10, 0x1F00, 2), { true,  nullptr,                 "VIDEO - XGA - GET DMQS (Display Mode Query and Set) DATA LENGTH" } },
	{ MAKE_INT_SEL(0x10, 0x1F01, 2), { true,  nullptr,                 "VIDEO - XGA - READ DMQS DATA" } },
	{ MAKE_INT_SEL(0x10, 0x1F02, 2), { true,  nullptr,                 "VIDEO - XGA - GET SVGA DMQS DATA LENGTH" } },
	{ MAKE_INT_SEL(0x10, 0x1F03, 2), { true,  nullptr,                 "VIDEO - XGA - GET SVGA DMQS DATA" } },
	{ MAKE_INT_SEL(0x10, 0x6F00, 2), { true,  nullptr,                 "VIDEO - Video7 VGA,VEGA VGA - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x10, 0xF000, 1), { true,  nullptr,                 "EGA - READ ONE REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0xF100, 1), { true,  nullptr,                 "EGA - WRITE ONE REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0xF200, 1), { true,  nullptr,                 "EGA - READ REGISTER RANGE" } },
	{ MAKE_INT_SEL(0x10, 0xF300, 1), { true,  nullptr,                 "EGA - WRITE REGISTER RANGE" } },
	{ MAKE_INT_SEL(0x10, 0xF400, 1), { true,  nullptr,                 "EGA - READ REGISTER SET" } },
	{ MAKE_INT_SEL(0x10, 0xF500, 1), { true,  nullptr,                 "EGA - WRITE REGISTER SET" } },
	{ MAKE_INT_SEL(0x10, 0xF600, 1), { true,  nullptr,                 "EGA - REVERT TO DEFAULT REGISTERS" } },
	{ MAKE_INT_SEL(0x10, 0xF700, 1), { true,  nullptr,                 "EGA - DEFINE DEFAULT REGISTER TABLE" } },
	{ MAKE_INT_SEL(0x10, 0xFA00, 1), { true,  nullptr,                 "EGA - INTERROGATE DRIVER" } },
	/* INT 11 */
	{ MAKE_INT_SEL(0x11, 0x0000, 0), { true,  nullptr,                 "BIOS - GET EQUIPMENT LIST" } },
	/* INT 12 */
	{ MAKE_INT_SEL(0x12, 0x0000, 0), { false, nullptr,                 "BIOS - GET MEMORY SIZE" } },
	/* INT 13 */
	{ MAKE_INT_SEL(0x13, 0x0000, 1), { true,  &CPUDebugger::INT_13,    "DISK - RESET DISK SYSTEM" } },
	{ MAKE_INT_SEL(0x13, 0x0100, 1), { true,  nullptr,                 "DISK - GET STATUS OF LAST OPERATION" } },
	{ MAKE_INT_SEL(0x13, 0x0200, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"DISK - READ SECTOR(S) INTO MEMORY" } },
	{ MAKE_INT_SEL(0x13, 0x0300, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"DISK - WRITE DISK SECTOR(S)" } },
	{ MAKE_INT_SEL(0x13, 0x0400, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"DISK - VERIFY DISK SECTOR(S)" } },
	{ MAKE_INT_SEL(0x13, 0x0500, 1), { true,  nullptr,                 "DISK - FORMAT TRACK" } },
	{ MAKE_INT_SEL(0x13, 0x0600, 1), { true,  nullptr,                 "FIXED DISK - FORMAT TRACK AND SET BAD SECTOR FLAGS" } },
	{ MAKE_INT_SEL(0x13, 0x0700, 1), { true,  nullptr,                 "FIXED DISK - FORMAT DRIVE STARTING AT GIVEN TRACK" } },
	{ MAKE_INT_SEL(0x13, 0x0800, 1), { true,  &CPUDebugger::INT_13,    "DISK - GET DRIVE PARAMETERS" } },
	{ MAKE_INT_SEL(0x13, 0x0900, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - INITIALIZE CONTROLLER WITH DRIVE PARAMETERS" } },
	{ MAKE_INT_SEL(0x13, 0x0A00, 1), { true,  nullptr,                 "HARD DISK - READ LONG SECTOR(S)" } },
	{ MAKE_INT_SEL(0x13, 0x0B00, 1), { true,  nullptr,                 "HARD DISK - WRITE LONG SECTOR(S)" } },
	{ MAKE_INT_SEL(0x13, 0x0C00, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"HARD DISK - SEEK TO CYLINDER" } },
	{ MAKE_INT_SEL(0x13, 0x0D00, 1), { true,  nullptr,                 "HARD DISK - RESET HARD DISKS" } },
	{ MAKE_INT_SEL(0x13, 0x0E00, 1), { true,  nullptr,                 "HARD DISK - READ SECTOR BUFFER" } },
	{ MAKE_INT_SEL(0x13, 0x0F00, 1), { true,  nullptr,                 "HARD DISK - WRITE SECTOR BUFFER" } },
	{ MAKE_INT_SEL(0x13, 0x1000, 1), { true,  nullptr,                 "HARD DISK - CHECK IF DRIVE READY" } },
	{ MAKE_INT_SEL(0x13, 0x1100, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - RECALIBRATE DRIVE" } },
	{ MAKE_INT_SEL(0x13, 0x1200, 1), { true,  nullptr,                 "HARD DISK - CONTROLLER RAM DIAGNOSTIC" } },
	{ MAKE_INT_SEL(0x13, 0x1300, 1), { true,  nullptr,                 "HARD DISK - DRIVE DIAGNOSTIC" } },
	{ MAKE_INT_SEL(0x13, 0x1400, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - CONTROLLER INTERNAL DIAGNOSTIC" } },
	{ MAKE_INT_SEL(0x13, 0x1500, 1), { true,  &CPUDebugger::INT_13,    "DISK - GET DISK TYPE" } },
	{ MAKE_INT_SEL(0x13, 0x1600, 1), { true,  &CPUDebugger::INT_13,    "FLOPPY - DETECT DISK CHANGE" } },
	{ MAKE_INT_SEL(0x13, 0x1700, 1), { true,  &CPUDebugger::INT_13,    "FLOPPY DISK - SET MEDIA TYPE FOR FORMAT" } },
	{ MAKE_INT_SEL(0x13, 0x1800, 1), { true,  &CPUDebugger::INT_13,    "FLOPPY DISK - SET MEDIA TYPE FOR FORMAT (new)" } },
	{ MAKE_INT_SEL(0x13, 0x1900, 1), { true,  nullptr,                 "FIXED DISK - PARK HEADS ON ESDI DRIVE" } },
	{ MAKE_INT_SEL(0x13, 0x2100, 1), { true,  nullptr,                 "HARD DISK - PS/1 - READ MULTIPLE DISK SECTORS" } },
	{ MAKE_INT_SEL(0x13, 0x2200, 1), { true,  nullptr,                 "HARD DISK - PS/1 - WRITE MULTIPLE DISK SECTORS" } },
	{ MAKE_INT_SEL(0x13, 0x2300, 1), { true,  nullptr,                 "HARD DISK - PS/1 - SET CONTROLLER FEATURES REGISTER" } },
	{ MAKE_INT_SEL(0x13, 0x2400, 1), { true,  nullptr,                 "HARD DISK - PS/1 - SET MULTIPLE MODE" } },
	{ MAKE_INT_SEL(0x13, 0x2500, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - PS/1 - IDENTIFY DRIVE" } },
	{ MAKE_INT_SEL(0x13, 0x4100, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x13, 0x4200, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - EXTENDED READ" } },
	{ MAKE_INT_SEL(0x13, 0x4300, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - EXTENDED WRITE" } },
	{ MAKE_INT_SEL(0x13, 0x4400, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - VERIFY SECTORS" } },
	{ MAKE_INT_SEL(0x13, 0x4500, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - LOCK/UNLOCK DRIVE" } },
	{ MAKE_INT_SEL(0x13, 0x4600, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - EJECT MEDIA" } },
	{ MAKE_INT_SEL(0x13, 0x4700, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - EXTENDED SEEK" } },
	{ MAKE_INT_SEL(0x13, 0x4800, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - GET DRIVE PARAMETERS" } },
	{ MAKE_INT_SEL(0x13, 0x4900, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - EXTENDED MEDIA CHANGE" } },
	{ MAKE_INT_SEL(0x13, 0x4A00, 1), { true,  nullptr,                 "Bootable CD-ROM - INITIATE DISK EMULATION" } },
	{ MAKE_INT_SEL(0x13, 0x4B00, 2), { true,  nullptr,                 "Bootable CD-ROM - TERMINATE DISK EMULATION" } },
	{ MAKE_INT_SEL(0x13, 0x4B01, 2), { true,  nullptr,                 "Bootable CD-ROM - GET STATUS" } },
	{ MAKE_INT_SEL(0x13, 0x4C00, 1), { true,  nullptr,                 "Bootable CD-ROM - INITIATE DISK EMULATION AND BOOT" } },
	{ MAKE_INT_SEL(0x13, 0x4D00, 2), { true,  nullptr,                 "Bootable CD-ROM - RETURN BOOT CATALOG" } },
	{ MAKE_INT_SEL(0x13, 0x4E00, 1), { true,  nullptr,                 "IBM/MS INT 13 Ext. - SET HARDWARE CONFIGURATION" } },
	/* INT 14 */
	{ MAKE_INT_SEL(0x14, 0x0000, 1), { false, nullptr,                 "SERIAL - INITIALIZE PORT" } },
	{ MAKE_INT_SEL(0x14, 0x0100, 1), { false, nullptr,                 "SERIAL - WRITE CHARACTER TO PORT" } },
	{ MAKE_INT_SEL(0x14, 0x0200, 1), { false, nullptr,                 "SERIAL - READ CHARACTER FROM PORT" } },
	{ MAKE_INT_SEL(0x14, 0x0300, 1), { false, nullptr,                 "SERIAL - GET PORT STATUS" } },
	{ MAKE_INT_SEL(0x14, 0x0400, 1), { false, nullptr,                 "SERIAL - EXTENDED INITIALIZE" } },
	{ MAKE_INT_SEL(0x14, 0x0500, 1), { false, nullptr,                 "SERIAL - EXTENDED COMMUNICATION PORT CONTROL" } },
	/* INT 15 */
	{ MAKE_INT_SEL(0x15, 0x2010, 2), { true,  nullptr,                 "OS HOOK - SETUP SYSREQ ROUTINE" } },
	{ MAKE_INT_SEL(0x15, 0x2011, 2), { true,  nullptr,                 "OS HOOK - COMPLETION OF SYSREQ FUNCTION" } },
	{ MAKE_INT_SEL(0x15, 0x2100, 1), { false, nullptr,                 "IBM BIOS - POWER-ON SELF-TEST ERROR LOG" } },
	{ MAKE_INT_SEL(0x15, 0x2200, 1), { true,  nullptr,                 "IBM BIOS - LOCATE ROM BASIC" } },
	{ MAKE_INT_SEL(0x15, 0x2300, 2), { true,  nullptr,                 "IBM BIOS - GET CMOS 2D-2E DATA" } },
	{ MAKE_INT_SEL(0x15, 0x2301, 2), { true,  nullptr,                 "IBM BIOS - SET CMOS 2D-2E DATA" } },
	{ MAKE_INT_SEL(0x15, 0x2302, 2), { true,  nullptr,                 "IBM BIOS - GET ROM STARTUP VIDEO REG TABLES" } },
	{ MAKE_INT_SEL(0x15, 0x2303, 2), { true,  nullptr,                 "IBM BIOS - VIDEO graphical func" } },
	{ MAKE_INT_SEL(0x15, 0x2304, 2), { true,  nullptr,                 "IBM BIOS - SYSTEM SETUP" } },
	{ MAKE_INT_SEL(0x15, 0x2305, 2), { true,  nullptr,                 "IBM BIOS - GET PROCESSOR SPEED" } },
	{ MAKE_INT_SEL(0x15, 0x2400, 2), { true,  nullptr,                 "IBM BIOS - DISABLE A20 GATE" } },
	{ MAKE_INT_SEL(0x15, 0x2401, 2), { true,  nullptr,                 "IBM BIOS - ENABLE A20 GATE" } },
	{ MAKE_INT_SEL(0x15, 0x2402, 2), { true,  nullptr,                 "IBM BIOS - GET A20 GATE STATUS" } },
	{ MAKE_INT_SEL(0x15, 0x2403, 2), { true,  nullptr,                 "IBM BIOS - QUERY A20 GATE SUPPORT" } },
	{ MAKE_INT_SEL(0x15, 0x4100, 1), { true,  nullptr,                 "SYSTEM - WAIT ON EXTERNAL EVENT" } },
	{ MAKE_INT_SEL(0x15, 0x4200, 1), { true,  nullptr,                 "SYSTEM - REQUEST POWER OFF" } },
	{ MAKE_INT_SEL(0x15, 0x4300, 1), { true,  nullptr,                 "SYSTEM - READ SYSTEM STATUS" } },
	{ MAKE_INT_SEL(0x15, 0x4400, 1), { true,  nullptr,                 "SYSTEM - (DE)ACTIVATE INTERNAL MODEM POWER" } },
	{ MAKE_INT_SEL(0x15, 0x4F00, 1), { false, nullptr,                 "KEYBOARD - KEYBOARD INTERCEPT" } },
	{ MAKE_INT_SEL(0x15, 0x5101, 2), { true,  nullptr,                 "IBM BIOS - EXPANSION UNIT, RETURN CONFIGURATION NUMBER" } },
	{ MAKE_INT_SEL(0x15, 0x5200, 1), { false, nullptr,                 "IBM/MS INT 13 Extensions - MEDIA EJECT INTERCEPT" } },
	{ MAKE_INT_SEL(0x15, 0x8000, 1), { false, nullptr,                 "OS HOOK - DEVICE OPEN" } },
	{ MAKE_INT_SEL(0x15, 0x8100, 1), { false, nullptr,                 "OS HOOK - DEVICE CLOSE" } },
	{ MAKE_INT_SEL(0x15, 0x8200, 1), { false, nullptr,                 "OS HOOK - PROGRAM TERMINATION" } },
	{ MAKE_INT_SEL(0x15, 0x8300, 1), { false, nullptr,                 "BIOS - SET EVENT WAIT INTERVAL" } },
	{ MAKE_INT_SEL(0x15, 0x8400, 1), { false, nullptr,                 "BIOS - JOYSTICK SUPPORT" } },
	{ MAKE_INT_SEL(0x15, 0x8500, 1), { false, nullptr,                 "OS HOOK - SysReq KEY ACTIVITY" } },
	{ MAKE_INT_SEL(0x15, 0x8600, 1), { true,  &CPUDebugger::INT_15_86, "BIOS - WAIT" } },
	{ MAKE_INT_SEL(0x15, 0x8700, 1), { true,  &CPUDebugger::INT_15_87, "SYSTEM - COPY EXTENDED MEM" } },
	{ MAKE_INT_SEL(0x15, 0x8800, 1), { true,  nullptr,                 "SYSTEM - GET EXTENDED MEMORY SIZE" } },
	{ MAKE_INT_SEL(0x15, 0x8900, 1), { true,  nullptr,                 "SYSTEM - SWITCH TO PROTECTED MODE" } },
	{ MAKE_INT_SEL(0x15, 0x9000, 1), { false, nullptr,                 "OS HOOK - DEVICE BUSY" } },
	{ MAKE_INT_SEL(0x15, 0x9100, 1), { false, nullptr,                 "OS HOOK - DEVICE POST" } },
	{ MAKE_INT_SEL(0x15, 0xC000, 1), { true,  nullptr,                 "SYSTEM - GET CONFIGURATION" } },
	{ MAKE_INT_SEL(0x15, 0xC100, 1), { false, nullptr,                 "SYSTEM - RETURN EXT-BIOS DATA AREA SEGMENT ADDR" } },
	{ MAKE_INT_SEL(0x15, 0xC200, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - ENABLE/DISABLE" } },
	{ MAKE_INT_SEL(0x15, 0xC201, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - RESET" } },
	{ MAKE_INT_SEL(0x15, 0xC202, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - SET SAMPLING RATE" } },
	{ MAKE_INT_SEL(0x15, 0xC203, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - SET RESOLUTION" } },
	{ MAKE_INT_SEL(0x15, 0xC204, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - GET TYPE" } },
	{ MAKE_INT_SEL(0x15, 0xC205, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - INITIALIZE" } },
	{ MAKE_INT_SEL(0x15, 0xC206, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - EXTENDED COMMANDS" } },
	{ MAKE_INT_SEL(0x15, 0xC207, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - SET DEVICE HANDLER ADDR" } },
	{ MAKE_INT_SEL(0x15, 0xC208, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - WRITE TO POINTER PORT" } },
	{ MAKE_INT_SEL(0x15, 0xC209, 2), { true,  nullptr,                 "SYSTEM - POINTING DEV - READ FROM POINTER PORT" } },
	{ MAKE_INT_SEL(0x15, 0xC300, 1), { true,  nullptr,                 "IBM BIOS - ENABLE/DISABLE WATCHDOG TIMEOUT" } },
	{ MAKE_INT_SEL(0x15, 0xC400, 1), { true,  nullptr,                 "IBM BIOS - PROGRAMMABLE OPTION SELECT" } },
	{ MAKE_INT_SEL(0x15, 0xC500, 1), { false, nullptr,                 "IBM BIOS - ROM BIOS TRACING CALLOUT" } },
	{ MAKE_INT_SEL(0x15, 0xC600, 1), { true,  nullptr,                 "IBM BIOS - GET POS DATA" } },
	{ MAKE_INT_SEL(0x15, 0xC700, 1), { true,  nullptr,                 "IBM BIOS - RETURN MEMORY-MAP INFORMATION" } },
	{ MAKE_INT_SEL(0x15, 0xC800, 1), { true,  nullptr,                 "IBM BIOS - ENABLE/DISABLE PROCESSOR FUNCTIONS" } },
	{ MAKE_INT_SEL(0x15, 0xC900, 1), { true,  nullptr,                 "IBM BIOS - GET CPU TYPE AND MASK REVISION" } },
	{ MAKE_INT_SEL(0x15, 0xCA00, 1), { true,  nullptr,                 "IBM BIOS - READ/WRITE CMOS MEMORY" } },
	{ MAKE_INT_SEL(0x15, 0xCE00, 1), { true,  nullptr,                 "IBM BIOS - ALLOCATE DMA ARBITRATION LEVEL" } },
	{ MAKE_INT_SEL(0x15, 0xCF00, 1), { true,  nullptr,                 "IBM BIOS - DEALLOCATE DMA ARBITRATION LEVEL" } },
	{ MAKE_INT_SEL(0x15, 0xD100, 2), { true,  nullptr,                 "IBM BIOS - GET NUMBER OF DEVICE DESCRIPTOR TABLE (DDT) ENTRIES" } },
	{ MAKE_INT_SEL(0x15, 0xD101, 2), { true,  nullptr,                 "IBM BIOS - RETURN DEVICE DESCRIPTOR TABLE (DDT) ENTRY BY NUMBER" } },
	{ MAKE_INT_SEL(0x15, 0xD102, 2), { true,  nullptr,                 "IBM BIOS - RETURN DEVICE DESCRIPTOR TABLE (DDT) ENTRY BY I/O ADDRSS" } },
	{ MAKE_INT_SEL(0x15, 0xD103, 2), { true,  nullptr,                 "IBM BIOS - RETURN ENTIRE DDT" } },
	{ MAKE_INT_SEL(0x15, 0xD104, 2), { true,  nullptr,                 "IBM BIOS - RETURN DEVICE DESCRIPTOR TABLE (DDT) ENTRY BY DEVICE ID" } },
	{ MAKE_INT_SEL(0x15, 0xD400, 1), { true,  nullptr,                 "IBM BIOS - GET PHYSICAL FIXED DISK DRIVE NUMBER (SELECTABLE BOOT)" } },
	{ MAKE_INT_SEL(0x15, 0xD600, 2), { true,  nullptr,                 "IBM BIOS - READ/WRITE BOOT DEVICE ID" } },
	{ MAKE_INT_SEL(0x15, 0xD601, 2), { true,  nullptr,                 "IBM BIOS - READ/WRITE BOOT DEVICE KEY" } },
	{ MAKE_INT_SEL(0x15, 0xD602, 2), { true,  nullptr,                 "IBM BIOS - QUERY BOOT REFERENCE PARTITION" } },
	{ MAKE_INT_SEL(0x15, 0xD800, 2), { true,  nullptr,                 "EISA SYSTEM ROM - READ SLOT CONFIGURATION INFORMATION" } },
	/* INT 16 */
	{ MAKE_INT_SEL(0x16, 0x0000, 1), { false, nullptr,                 "KEYBOARD - GET KEYSTROKE" } },
	{ MAKE_INT_SEL(0x16, 0x0100, 1), { false, nullptr,                 "KEYBOARD - CHECK FOR KEYSTROKE" } },
	{ MAKE_INT_SEL(0x16, 0x0200, 1), { false, nullptr,                 "KEYBOARD - GET SHIFT FLAGS" } },
	{ MAKE_INT_SEL(0x16, 0x0300, 1), { false, nullptr,                 "KEYBOARD - SET TYPEMATIC RATE AND DELAY" } },
	{ MAKE_INT_SEL(0x16, 0x0500, 1), { true,  nullptr,                 "KEYBOARD - STORE KEYSTROKE IN KEYBOARD BUFFER" } },
	{ MAKE_INT_SEL(0x16, 0x0900, 1), { true,  nullptr,                 "KEYBOARD - GET KEYBOARD FUNCTIONALITY" } },
	{ MAKE_INT_SEL(0x16, 0x0A00, 1), { true,  nullptr,                 "KEYBOARD - GET KEYBOARD ID" } },
	{ MAKE_INT_SEL(0x16, 0x1000, 1), { true,  nullptr,                 "KEYBOARD - GET ENHANCED KEYSTROKE" } },
	{ MAKE_INT_SEL(0x16, 0x1100, 1), { false, nullptr,                 "KEYBOARD - CHECK FOR ENHANCED KEYSTROKE" } },
	{ MAKE_INT_SEL(0x16, 0x1200, 1), { false, nullptr,                 "KEYBOARD - GET EXTENDED SHIFT STATES" } },
	{ MAKE_INT_SEL(0x16, 0x5500, 2), { false, nullptr,                 "Microsoft Word - TSR COOPERATION" } },
	{ MAKE_INT_SEL(0x16, 0x55FE, 2), { false, nullptr,                 "Microsoft QBASIC - TSR COOPERATION" } },
	{ MAKE_INT_SEL(0x16, 0x55FF, 2), { false, nullptr,                 "Microsoft Word - TSR COOPERATION" } },
	{ MAKE_INT_SEL(0x16, 0x9200, 1), { false, nullptr,                 "KEYB.COM KEYBOARD CAPABILITIES CHECK" } },
	{ MAKE_INT_SEL(0x16, 0xA200, 1), { false, nullptr,                 "KEYB.COM KEYBOARD CAPABILITIES CHECK" } },
	/* INT 17 */
	{ MAKE_INT_SEL(0x17, 0x0000, 1), { false, nullptr,                 "PRINTER - WRITE CHARACTER" } },
	{ MAKE_INT_SEL(0x17, 0x0100, 1), { false, nullptr,                 "PRINTER - INITIALIZE PORT" } },
	{ MAKE_INT_SEL(0x17, 0x0200, 1), { false, nullptr,                 "PRINTER - GET STATUS" } },
	/* INT 1A */
	{ MAKE_INT_SEL(0x1A, 0x0000, 1), { false, &CPUDebugger::INT_1A_00, "TIME - GET SYSTEM TIME" } },
	/* INT 1C */
	{ MAKE_INT_SEL(0x1C, 0x0000, 0), { false, nullptr,                 "SYSTEM TIMER TICK" } },
	/* INT 20 */
	{ MAKE_INT_SEL(0x20, 0x0000, 0), { true,  &CPUDebugger::INT_20,    "" } }, // DOS terminate program / Windows VxD
	/* INT 21 */
	{ MAKE_INT_SEL(0x21, 0x0000, 1), { true,  nullptr,                 "DOS - TERMINATE PROGRAM" } },
	{ MAKE_INT_SEL(0x21, 0x0100, 1), { true,  nullptr,                 "DOS - READ CHAR FROM STDIN, WITH ECHO" } },
	{ MAKE_INT_SEL(0x21, 0x0200, 1), { true,  &CPUDebugger::INT_21_02, "DOS - WRITE CHAR TO STDOUT" } },
	{ MAKE_INT_SEL(0x21, 0x0300, 1), { true,  nullptr,                 "DOS - READ CHAR FROM STDAUX" } },
	{ MAKE_INT_SEL(0x21, 0x0400, 1), { true,  nullptr,                 "DOS - WRITE CHAR TO STDAUX" } },
	{ MAKE_INT_SEL(0x21, 0x0500, 1), { true,  nullptr,                 "DOS - WRITE CHAR TO PRINTER" } },
	{ MAKE_INT_SEL(0x21, 0x0600, 1), { false, nullptr,                 "DOS - DIRECT CONSOLE OUTPUT" } },
	{ MAKE_INT_SEL(0x21, 0x0700, 1), { true,  nullptr,                 "DOS - DIRECT CHAR INPUT, WITHOUT ECHO" } },
	{ MAKE_INT_SEL(0x21, 0x0800, 1), { true,  nullptr,                 "DOS - CHAR INPUT WITHOUT ECHO" } },
	{ MAKE_INT_SEL(0x21, 0x0900, 1), { true,  &CPUDebugger::INT_21_09, "DOS - WRITE STRING TO STDOUT" } },
	{ MAKE_INT_SEL(0x21, 0x0A00, 1), { true,  nullptr,                 "DOS - BUFFERED INPUT" } },
	{ MAKE_INT_SEL(0x21, 0x0B00, 1), { true,  nullptr,                 "DOS - GET STDIN STATUS" } },
	{ MAKE_INT_SEL(0x21, 0x0C00, 1), { true,  nullptr,                 "DOS - FLUSH BUFFER AND READ STANDARD INPUT" } },
	{ MAKE_INT_SEL(0x21, 0x0D00, 1), { true,  nullptr,                 "DOS - DISK RESET" } },
	{ MAKE_INT_SEL(0x21, 0x0E00, 1), { true,  &CPUDebugger::INT_21_0E, "DOS - SELECT DEFAULT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x0F00, 1), { true,  nullptr,                 "DOS - OPEN FILE USING FCB" } },
	{ MAKE_INT_SEL(0x21, 0x1000, 1), { true,  nullptr,                 "DOS - CLOSE FILE USING FCB" } },
	{ MAKE_INT_SEL(0x21, 0x1100, 1), { true,  nullptr,                 "DOS - FIND FIRST MATCHING FILE USING FCB" } },
	{ MAKE_INT_SEL(0x21, 0x1200, 1), { true,  nullptr,                 "DOS - FIND NEXT MATCHING FILE USING FCB" } },
	{ MAKE_INT_SEL(0x21, 0x1300, 1), { true,  nullptr,                 "DOS - DELETE FILE USING FCB" } },
	{ MAKE_INT_SEL(0x21, 0x1400, 1), { true,  nullptr,                 "DOS - SEQUENTIAL READ FROM FCB FILE" } },
	{ MAKE_INT_SEL(0x21, 0x1500, 1), { true,  nullptr,                 "DOS - SEQUENTIAL WRITE TO FCB FILE" } },
	{ MAKE_INT_SEL(0x21, 0x1600, 1), { true,  nullptr,                 "DOS - CREATE OR TRUNCATE FILE USING FCB" } },
	{ MAKE_INT_SEL(0x21, 0x1700, 1), { true,  nullptr,                 "DOS - RENAME FILE USING FCB" } },
	{ MAKE_INT_SEL(0x21, 0x1800, 1), { true,  nullptr,                 "DOS - NULL FUNCTION FOR CP/M COMPATIBILITY" } },
	{ MAKE_INT_SEL(0x21, 0x1900, 1), { true,  nullptr,                 "DOS - GET CURRENT DEFAULT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x1A00, 1), { true,  nullptr,                 "DOS - SET DISK TRANSFER AREA ADDRESS" } },
	{ MAKE_INT_SEL(0x21, 0x1B00, 1), { true,  nullptr,                 "DOS - GET ALLOCATION INFORMATION FOR DEFAULT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x1C00, 1), { true,  nullptr,                 "DOS - GET ALLOCATION INFORMATION FOR SPECIFIC DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x1F00, 1), { true,  nullptr,                 "DOS - GET DRIVE PARAMETER BLOCK FOR DEFAULT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x2100, 1), { true,  nullptr,                 "DOS - READ RANDOM RECORD FROM FCB FILE" } },
	{ MAKE_INT_SEL(0x21, 0x2200, 1), { true,  nullptr,                 "DOS - WRITE RANDOM RECORD TO FCB FILE" } },
	{ MAKE_INT_SEL(0x21, 0x2300, 1), { true,  nullptr,                 "DOS - GET FILE SIZE FOR FCB" } },
	{ MAKE_INT_SEL(0x21, 0x2400, 1), { true,  nullptr,                 "DOS - SET RANDOM RECORD NUMBER FOR FCB" } },
	{ MAKE_INT_SEL(0x21, 0x2500, 1), { true,  &CPUDebugger::INT_21_25, "DOS - SET INTERRUPT VECTOR" } },
	{ MAKE_INT_SEL(0x21, 0x2600, 1), { true,  nullptr,                 "DOS - CREATE NEW PROGRAM SEGMENT PREFIX" } },
	{ MAKE_INT_SEL(0x21, 0x2700, 1), { true,  nullptr,                 "DOS - RANDOM BLOCK READ FROM FCB FILE" } },
	{ MAKE_INT_SEL(0x21, 0x2800, 1), { true,  nullptr,                 "DOS - RANDOM BLOCK WRITE TO FCB FILE" } },
	{ MAKE_INT_SEL(0x21, 0x2900, 1), { true,  nullptr,                 "DOS - PARSE FILENAME INTO FCB" } },
	{ MAKE_INT_SEL(0x21, 0x2A00, 1), { true,  nullptr,                 "DOS - GET SYSTEM DATE" } },
	{ MAKE_INT_SEL(0x21, 0x2B00, 1), { true,  nullptr,                 "DOS - SET SYSTEM DATE" } },
	{ MAKE_INT_SEL(0x21, 0x2C00, 1), { false, &CPUDebugger::INT_21_2C, "DOS - GET SYSTEM TIME" } },
	{ MAKE_INT_SEL(0x21, 0x2D00, 1), { true,  nullptr,                 "DOS - SET SYSTEM TIME" } },
	{ MAKE_INT_SEL(0x21, 0x2E00, 1), { true,  nullptr,                 "DOS - SET VERIFY FLAG" } },
	{ MAKE_INT_SEL(0x21, 0x2F00, 1), { true,  nullptr,                 "DOS - GET DISK TRANSFER AREA ADDRESS" } },
	{ MAKE_INT_SEL(0x21, 0x3000, 1), { true,  &CPUDebugger::INT_21_30, "DOS - GET DOS VERSION" } },
	{ MAKE_INT_SEL(0x21, 0x3100, 1), { true,  nullptr,                 "DOS - TERMINATE AND STAY RESIDENT" } },
	{ MAKE_INT_SEL(0x21, 0x3200, 1), { true,  &CPUDebugger::INT_21_32, "DOS - GET DOS DRIVE PARAMETER BLOCK FOR SPECIFIC DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x3300, 1), { false, nullptr,                 "DOS - EXTENDED BREAK CHECKING" } },
	{ MAKE_INT_SEL(0x21, 0x3302, 2), { false, nullptr,                 "DOS - GET AND SET EXTENDED CONTROL-BREAK CHECKING STATE" } },
	{ MAKE_INT_SEL(0x21, 0x3303, 2), { false, nullptr,                 "DOS - GET CURRENT CPSW STATE" } },
	{ MAKE_INT_SEL(0x21, 0x3304, 2), { false, nullptr,                 "DOS - SET CPSW STATE" } },
	{ MAKE_INT_SEL(0x21, 0x3305, 2), { true,  nullptr,                 "DOS - GET BOOT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x3306, 2), { true,  nullptr,                 "DOS - GET TRUE VERSION NUMBER" } },
	{ MAKE_INT_SEL(0x21, 0x3400, 1), { false, nullptr,                 "DOS - GET ADDRESS OF INDOS FLAG" } },
	{ MAKE_INT_SEL(0x21, 0x3500, 1), { false, nullptr,                 "DOS - GET INTERRUPT VECTOR" } },
	{ MAKE_INT_SEL(0x21, 0x3600, 1), { true,  &CPUDebugger::INT_21_36, "DOS - GET FREE DISK SPACE" } },
	{ MAKE_INT_SEL(0x21, 0x3700, 2), { true,  nullptr,                 "DOS - GET SWITCH CHARACTER" } },
	{ MAKE_INT_SEL(0x21, 0x3701, 2), { true,  nullptr,                 "DOS - SET SWITCH CHARACTER" } },
	{ MAKE_INT_SEL(0x21, 0x3800, 1), { true,  nullptr,                 "DOS - GET COUNTRY-SPECIFIC INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x3900, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - MKDIR" } },
	{ MAKE_INT_SEL(0x21, 0x3A00, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - RMDIR" } },
	{ MAKE_INT_SEL(0x21, 0x3B00, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - CHDIR" } },
	{ MAKE_INT_SEL(0x21, 0x3D00, 1), { true,  &CPUDebugger::INT_21_3D, "DOS - FILE OPEN" } },
	{ MAKE_INT_SEL(0x21, 0x3E00, 1), { true,  &CPUDebugger::INT_21_3E, "DOS - FILE CLOSE" } },
	{ MAKE_INT_SEL(0x21, 0x3F00, 1), { true,  &CPUDebugger::INT_21_3F, "DOS - FILE READ" } },
	{ MAKE_INT_SEL(0x21, 0x4000, 1), { true,  &CPUDebugger::INT_21_40, "DOS - FILE WRITE" } },
	{ MAKE_INT_SEL(0x21, 0x4100, 1), { true,  nullptr,                 "DOS - FILE UNLINK" } },
	{ MAKE_INT_SEL(0x21, 0x4200, 1), { true,  &CPUDebugger::INT_21_42, "DOS - FILE SEEK" } },
	{ MAKE_INT_SEL(0x21, 0x4300, 2), { true,  &CPUDebugger::INT_21_43, "DOS - GET FILE ATTRIBUTES" } },
	{ MAKE_INT_SEL(0x21, 0x4301, 2), { true,  nullptr,                 "DOS - CHMOD - SET FILE ATTRIBUTES" } },
	{ MAKE_INT_SEL(0x21, 0x4400, 2), { true,  nullptr,                 "DOS - GET DEVICE INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x4401, 2), { true,  nullptr,                 "DOS - SET DEVICE INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x4402, 2), { true,  nullptr,                 "DOS - IOCTL - READ FROM CHARACTER DEVICE CONTROL CHANNEL" } },
	{ MAKE_INT_SEL(0x21, 0x4403, 2), { true,  nullptr,                 "DOS - IOCTL - WRITE TO CHARACTER DEVICE CONTROL CHANNEL" } },
	{ MAKE_INT_SEL(0x21, 0x4404, 2), { true,  nullptr,                 "DOS - IOCTL - READ FROM BLOCK DEVICE CONTROL CHANNEL" } },
	{ MAKE_INT_SEL(0x21, 0x4405, 2), { true,  nullptr,                 "DOS - IOCTL - WRITE TO BLOCK DEVICE CONTROL CHANNEL" } },
	{ MAKE_INT_SEL(0x21, 0x4406, 2), { true,  nullptr,                 "DOS - IOCTL - GET INPUT STATUS" } },
	{ MAKE_INT_SEL(0x21, 0x4407, 2), { true,  nullptr,                 "DOS - IOCTL - GET OUTPUT STATUS" } },
	{ MAKE_INT_SEL(0x21, 0x4408, 2), { true,  nullptr,                 "DOS - IOCTL - CHECK IF BLOCK DEVICE REMOVABLE" } },
	{ MAKE_INT_SEL(0x21, 0x4409, 2), { true,  nullptr,                 "DOS - IOCTL - CHECK IF BLOCK DEVICE REMOTE" } },
	{ MAKE_INT_SEL(0x21, 0x440A, 2), { false, nullptr,                 "DOS - IOCTL - CHECK IF HANDLE IS REMOTE" } },
	{ MAKE_INT_SEL(0x21, 0x440B, 2), { false, nullptr,                 "DOS - IOCTL - SET SHARING RETRY COUNT" } },
	{ MAKE_INT_SEL(0x21, 0x440C, 2), { false, nullptr,                 "DOS - IOCTL - GENERIC CHARACTER DEVICE REQUEST" } },
	{ MAKE_INT_SEL(0x21, 0x440D, 2), { true,  &CPUDebugger::INT_21_440D,"DOS - IOCTL - GENERIC BLOCK DEVICE REQUEST" } },
	{ MAKE_INT_SEL(0x21, 0x440E, 2), { true,  nullptr,                 "DOS - IOCTL - GET LOGICAL DRIVE MAP" } },
	{ MAKE_INT_SEL(0x21, 0x440F, 2), { true,  nullptr,                 "DOS - IOCTL - SET LOGICAL DRIVE MAP" } },
	{ MAKE_INT_SEL(0x21, 0x4410, 2), { true,  nullptr,                 "DOS - IOCTL - QUERY GENERIC IOCTL CAPABILITY (HANDLE)" } },
	{ MAKE_INT_SEL(0x21, 0x4411, 2), { true,  nullptr,                 "DOS - IOCTL - QUERY GENERIC IOCTL CAPABILITY (DRIVE)" } },
	{ MAKE_INT_SEL(0x21, 0x4500, 1), { true,  nullptr,                 "DOS - DUP - DUPLICATE FILE HANDLE" } },
	{ MAKE_INT_SEL(0x21, 0x4600, 1), { true,  nullptr,                 "DOS - DUP2, FORCEDUP - FORCE DUPLICATE FILE HANDLE" } },
	{ MAKE_INT_SEL(0x21, 0x4700, 1), { true,  nullptr,                 "DOS - CWD - GET CURRENT DIRECTORY" } },
	{ MAKE_INT_SEL(0x21, 0x4800, 1), { true,  &CPUDebugger::INT_21_48, "DOS - ALLOCATE MEMORY" } },
	{ MAKE_INT_SEL(0x21, 0x4900, 1), { true,  nullptr,                 "DOS - FREE MEMORY" } },
	{ MAKE_INT_SEL(0x21, 0x4A00, 1), { true,  &CPUDebugger::INT_21_4A, "DOS - RESIZE MEMORY BLOCK" } },
	{ MAKE_INT_SEL(0x21, 0x4B00, 1), { true,  &CPUDebugger::INT_21_4B, "DOS - EXEC" } },
	{ MAKE_INT_SEL(0x21, 0x4B05, 2), { true,  nullptr,                 "DOS - SET EXECUTION STATE" } },
	{ MAKE_INT_SEL(0x21, 0x4C00, 1), { true,  nullptr,                 "DOS - EXIT - TERMINATE WITH RETURN CODE" } },
	{ MAKE_INT_SEL(0x21, 0x4D00, 1), { true,  nullptr,                 "DOS - GET RETURN CODE (ERRORLEVEL)" } },
	{ MAKE_INT_SEL(0x21, 0x4E00, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - FINDFIRST" } },
	{ MAKE_INT_SEL(0x21, 0x4F00, 1), { true,  nullptr,                 "DOS - FINDNEXT - FIND NEXT MATCHING FILE" } },
	{ MAKE_INT_SEL(0x21, 0x5000, 1), { true,  nullptr,                 "DOS - SET CURRENT PROCESS ID" } },
	{ MAKE_INT_SEL(0x21, 0x5100, 1), { false, nullptr,                 "DOS - GET CURRENT PROCESS ID (GET PSP ADDRESS)" } },
	{ MAKE_INT_SEL(0x21, 0x5200, 1), { false, nullptr,                 "DOS - GET LIST OF LISTS" } },
	{ MAKE_INT_SEL(0x21, 0x5300, 1), { false, nullptr,                 "DOS - TRANSLATE BIOS PARAMETER BLOCK TO DRIVE PARAM BLOCK" } },
	{ MAKE_INT_SEL(0x21, 0x5400, 1), { true,  nullptr,                 "DOS - GET VERIFY FLAG" } },
	{ MAKE_INT_SEL(0x21, 0x5500, 1), { false, nullptr,                 "DOS - CREATE CHILD PSP" } },
	{ MAKE_INT_SEL(0x21, 0x5600, 1), { true,  nullptr,                 "DOS - RENAME - RENAME FILE" } },
	{ MAKE_INT_SEL(0x21, 0x5700, 2), { true,  nullptr,                 "DOS - GET FILE'S LAST-WRITTEN DATE AND TIME" } },
	{ MAKE_INT_SEL(0x21, 0x5701, 2), { true,  nullptr,                 "DOS - SET FILE'S LAST-WRITTEN DATE AND TIME" } },
	{ MAKE_INT_SEL(0x21, 0x5800, 1), { true,  nullptr,                 "DOS - GET/SET MEM ALLOC STRATEGY - GET/SET UMB LINK STATE" } },
	{ MAKE_INT_SEL(0x21, 0x5900, 1), { true,  nullptr,                 "DOS - GET EXTENDED ERROR INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x5A00, 1), { true,  nullptr,                 "DOS - CREATE TEMPORARY FILE" } },
	{ MAKE_INT_SEL(0x21, 0x5B00, 1), { true,  nullptr,                 "DOS - CREATE NEW FILE" } },
	{ MAKE_INT_SEL(0x21, 0x5C00, 1), { true,  nullptr,                 "DOS - FLOCK - RECORD LOCKING" } },
	{ MAKE_INT_SEL(0x21, 0x5D00, 2), { false, nullptr,                 "DOS - SERVER FUNCTION CALL" } },
	{ MAKE_INT_SEL(0x21, 0x5D01, 2), { false, nullptr,                 "DOS - COMMIT ALL FILES FOR SPECIFIED COMPUTER/PROCESS" } },
	{ MAKE_INT_SEL(0x21, 0x5D02, 2), { false, nullptr,                 "DOS - SHARE.EXE - CLOSE FILE BY NAME" } },
	{ MAKE_INT_SEL(0x21, 0x5D03, 2), { false, nullptr,                 "DOS - SHARE.EXE - CLOSE ALL FILES FOR GIVEN COMPUTER" } },
	{ MAKE_INT_SEL(0x21, 0x5D04, 2), { false, nullptr,                 "DOS - SHARE.EXE - CLOSE ALL FILES FOR GIVEN PROCESS" } },
	{ MAKE_INT_SEL(0x21, 0x5D05, 2), { false, nullptr,                 "DOS - SHARE.EXE - GET OPEN FILE LIST ENTRY" } },
	{ MAKE_INT_SEL(0x21, 0x5D06, 2), { false, nullptr,                 "DOS - GET ADDRESS OF DOS SWAPPABLE DATA AREA" } },
	{ MAKE_INT_SEL(0x21, 0x5D07, 2), { true,  nullptr,                 "DOS NET - GET REDIRECTED PRINTER MODE" } },
	{ MAKE_INT_SEL(0x21, 0x5D08, 2), { false, nullptr,                 "DOS NET - SET REDIRECTED PRINTER MODE" } },
	{ MAKE_INT_SEL(0x21, 0x5D09, 2), { false, nullptr,                 "DOS NET - FLUSH REDIRECTED PRINTER OUTPUT" } },
	{ MAKE_INT_SEL(0x21, 0x5D0A, 2), { true,  nullptr,                 "DOS - SET EXTENDED ERROR INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x5D0B, 2), { false, nullptr,                 "DOS - GET DOS SWAPPABLE DATA AREAS" } },
	{ MAKE_INT_SEL(0x21, 0x5E01, 2), { true,  nullptr,                 "DOS NET - SET MACHINE NAME" } },
	{ MAKE_INT_SEL(0x21, 0x5E02, 2), { true,  nullptr,                 "DOS NET - SET NETWORK PRINTER SETUP STRING" } },
	{ MAKE_INT_SEL(0x21, 0x5E03, 2), { true,  nullptr,                 "DOS NET - GET NETWORK PRINTER SETUP STRING" } },
	{ MAKE_INT_SEL(0x21, 0x5E04, 2), { true,  nullptr,                 "DOS NET - SET PRINTER MODE" } },
	{ MAKE_INT_SEL(0x21, 0x5E05, 2), { true,  nullptr,                 "DOS NET - GET PRINTER MODE" } },
	{ MAKE_INT_SEL(0x21, 0x5F00, 2), { true,  nullptr,                 "DOS NET - GET REDIRECTION MODE" } },
	{ MAKE_INT_SEL(0x21, 0x5F01, 2), { true,  nullptr,                 "DOS NET - SET REDIRECTION MODE" } },
	{ MAKE_INT_SEL(0x21, 0x5F02, 2), { true,  nullptr,                 "DOS NET - GET REDIRECTION LIST ENTRY" } },
	{ MAKE_INT_SEL(0x21, 0x5F03, 2), { true,  &CPUDebugger::INT_21_5F03,"DOS NET - REDIRECT DEVICE" } },
	{ MAKE_INT_SEL(0x21, 0x5F04, 2), { true,  nullptr,                 "DOS NET - CANCEL REDIRECTION" } },
	{ MAKE_INT_SEL(0x21, 0x5F05, 2), { true,  nullptr,                 "DOS NET - GET EXTENDED REDIRECTION LIST ENTRY" } },
	{ MAKE_INT_SEL(0x21, 0x5F06, 2), { true,  nullptr,                 "Network - GET FULL REDIRECTION LIST" } },
	{ MAKE_INT_SEL(0x21, 0x5F07, 2), { true,  nullptr,                 "DOS - ENABLE DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x5F08, 2), { true,  nullptr,                 "DOS - DISABLE DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x6000, 1), { true,  nullptr,                 "DOS - TRUENAME - CANONICALIZE FILENAME OR PATH" } },
	{ MAKE_INT_SEL(0x21, 0x6200, 1), { true,  nullptr,                 "DOS - GET CURRENT PSP ADDRESS" } },
	{ MAKE_INT_SEL(0x21, 0x6300, 2), { false, nullptr,                 "DOS - GET DOUBLE BYTE CHARACTER SET LEAD-BYTE TABLE" } },
	{ MAKE_INT_SEL(0x21, 0x6400, 1), { false, nullptr,                 "DOS - SET DEVICE DRIVER LOOKAHEAD FLAG" } },
	{ MAKE_INT_SEL(0x21, 0x6500, 1), { true,  nullptr,                 "DOS - COUNTRY-DEPENDENT CHARACTER CAPITALIZATION" } },
	{ MAKE_INT_SEL(0x21, 0x6523, 2), { true,  nullptr,                 "DOS - DETERMINE IF CHARACTER REPRESENTS YES/NO RESPONSE" } },
	{ MAKE_INT_SEL(0x21, 0x6500, 1), { false, nullptr,                 "DOS - COUNTRY-DEPENDENT FILENAME CAPITALIZATION" } },
	{ MAKE_INT_SEL(0x21, 0x6601, 2), { false, nullptr,                 "DOS - GET GLOBAL CODE PAGE TABLE" } },
	{ MAKE_INT_SEL(0x21, 0x6602, 2), { false, nullptr,                 "DOS - SET GLOBAL CODE PAGE TABLE" } },
	{ MAKE_INT_SEL(0x21, 0x6700, 1), { true,  nullptr,                 "DOS - SET HANDLE COUNT" } },
	{ MAKE_INT_SEL(0x21, 0x6800, 1), { true,  nullptr,                 "DOS - FFLUSH - COMMIT FILE" } },
	{ MAKE_INT_SEL(0x21, 0x6900, 1), { true,  nullptr,                 "DOS - GET/SET DISK SERIAL NUMBER" } },
	{ MAKE_INT_SEL(0x21, 0x6A00, 1), { true,  nullptr,                 "DOS - COMMIT FILE" } },
	{ MAKE_INT_SEL(0x21, 0x6B00, 1), { false, nullptr,                 "DOS - IFS IOCTL / NULL FUNCTION" } },
	{ MAKE_INT_SEL(0x21, 0x6C00, 2), { true,  nullptr,                 "DOS - EXTENDED OPEN/CREATE" } },
	{ MAKE_INT_SEL(0x21, 0x6D00, 1), { true,  nullptr,                 "DOS ROM - FIND FIRST ROM PROGRAM" } },
	{ MAKE_INT_SEL(0x21, 0x6E00, 1), { true,  nullptr,                 "DOS ROM - FIND NEXT ROM PROGRAM" } },
	{ MAKE_INT_SEL(0x21, 0x6F00, 2), { true,  nullptr,                 "DOS ROM - GET ROM SCAN START ADDRESS" } },
	{ MAKE_INT_SEL(0x21, 0x6F01, 2), { true,  nullptr,                 "DOS ROM - SET ROM SCAN START ADDRESS" } },
	{ MAKE_INT_SEL(0x21, 0x6F02, 2), { true,  nullptr,                 "DOS ROM - GET EXCLUSION REGION LIST" } },
	{ MAKE_INT_SEL(0x21, 0x6F03, 2), { true,  nullptr,                 "DOS ROM - SET EXCLUSION REGION LIST" } },
	{ MAKE_INT_SEL(0x21, 0xFAFF, 2), { true,  nullptr,                 "IBM PC-DOS - KEYBGK - SELECT KEYBOARD LAYOUT" } },
	/* INT 28 */
	{ MAKE_INT_SEL(0x28, 0x0000, 0), { false, nullptr,                 "DOS - IDLE INTERRUPT" } },
	/* INT 29 */
	{ MAKE_INT_SEL(0x29, 0x0000, 0), { false, &CPUDebugger::INT_10,    "DOS - FAST CONSOLE OUTPUT" } },
	/* INT 2A */
	{ MAKE_INT_SEL(0x2A, 0x8100, 1), { false, nullptr,                 "DOS NET - END CRITICAL SECTION" } },
	{ MAKE_INT_SEL(0x2A, 0x8200, 1), { false, nullptr,                 "DOS NET - END CRITICAL SECTIONS 0-7" } },
	/* INT 2B */
	{ MAKE_INT_SEL(0x2B, 0x0000, 1), { true,  nullptr,                 "IBM - RAM LOADER - fn0" } },
	{ MAKE_INT_SEL(0x2B, 0x0100, 1), { true,  &CPUDebugger::INT_2B_01, "IBM - RAM LOADER - FIND FILE IN ROMDRV" } },
	{ MAKE_INT_SEL(0x2B, 0x0200, 1), { true,  nullptr,                 "IBM - RAM LOADER - COPY FILE FROM ROMDRV" } },
	{ MAKE_INT_SEL(0x2B, 0x0300, 1), { true,  nullptr,                 "IBM - RAM LOADER - fn3" } },
	/* INT 2F */
	{ MAKE_INT_SEL(0x2F, 0x0080, 2), { true,  nullptr,                 "DOS PRINT - GIVE PRINT A TIME SLICE" } },
	{ MAKE_INT_SEL(0x2F, 0x0100, 2), { true,  nullptr,                 "DOS PRINT - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x0101, 2), { true,  nullptr,                 "DOS PRINT - SUBMIT FILE FOR PRINTING" } },
	{ MAKE_INT_SEL(0x2F, 0x0102, 2), { true,  nullptr,                 "DOS PRINT - REMOVE FILE FROM PRINT QUEUE" } },
	{ MAKE_INT_SEL(0x2F, 0x0103, 2), { true,  nullptr,                 "DOS PRINT - CANCEL ALL FILES IN PRINT QUEUE" } },
	{ MAKE_INT_SEL(0x2F, 0x0104, 2), { true,  nullptr,                 "DOS PRINT - FREEZE PRINT QUEUE TO READ JOB STATUS" } },
	{ MAKE_INT_SEL(0x2F, 0x0105, 2), { true,  nullptr,                 "DOS PRINT - RESTART PRINT QUEUE AFTER STATUS READ" } },
	{ MAKE_INT_SEL(0x2F, 0x0106, 2), { true,  nullptr,                 "DOS PRINT - GET PRINTER DEVICE" } },
	{ MAKE_INT_SEL(0x2F, 0x0500, 2), { true,  nullptr,                 "DOS CRITICAL ERROR HANDLER - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x0500, 1), { true,  nullptr,                 "DOS CRITICAL ERROR HANDLER - EXPAND ERROR INTO STRING" } },
	{ MAKE_INT_SEL(0x2F, 0x0600, 2), { true,  nullptr,                 "DOS ASSIGN - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x0601, 2), { true,  nullptr,                 "DOS ASSIGN - GET DRIVE ASSIGNMENT TABLE" } },
	{ MAKE_INT_SEL(0x2F, 0x0800, 2), { true,  nullptr,                 "DRIVER.SYS - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x0801, 2), { true,  nullptr,                 "DRIVER.SYS - ADD NEW BLOCK DEVICE" } },
	{ MAKE_INT_SEL(0x2F, 0x0802, 2), { true,  nullptr,                 "DRIVER.SYS - EXECUTE DEVICE DRIVER REQUEST" } },
	{ MAKE_INT_SEL(0x2F, 0x0803, 2), { true,  nullptr,                 "DRIVER.SYS - GET DRIVE DATA TABLE LIST" } },
	{ MAKE_INT_SEL(0x2F, 0x1000, 2), { true,  nullptr,                 "DOS SHARE - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1080, 2), { false, nullptr,                 "DOS SHARE - TURN ON FILE SHARING CHECKS" } },
	{ MAKE_INT_SEL(0x2F, 0x1081, 2), { false, nullptr,                 "DOS SHARE - TURN OFF FILE SHARING CHECKS" } },
	{ MAKE_INT_SEL(0x2F, 0x1100, 2), { true,  nullptr,                 "NET REDIR - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1101, 2), { true,  nullptr,                 "NET REDIR - REMOVE REMOTE DIRECTORY" } },
	{ MAKE_INT_SEL(0x2F, 0x1102, 2), { true,  nullptr,                 "IFSFUNC.EXE - REMOVE REMOTE DIRECTORY" } },
	{ MAKE_INT_SEL(0x2F, 0x1103, 2), { true,  nullptr,                 "NET REDIR - MAKE REMOTE DIRECTORY" } },
	{ MAKE_INT_SEL(0x2F, 0x1104, 2), { true,  nullptr,                 "IFSFUNC.EXE - MAKE REMOTE DIRECTORY" } },
	{ MAKE_INT_SEL(0x2F, 0x1105, 2), { true,  nullptr,                 "NET REDIR - CHDIR" } },
	{ MAKE_INT_SEL(0x2F, 0x1106, 2), { true,  nullptr,                 "NET REDIR - CLOSE REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1107, 2), { true,  nullptr,                 "NET REDIR - COMMIT REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1108, 2), { true,  nullptr,                 "NET REDIR - READ FROM REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1109, 2), { true,  nullptr,                 "NET REDIR - WRITE TO REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x110A, 2), { true,  nullptr,                 "NET REDIR - LOCK REGION OF FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x110A, 2), { true,  nullptr,                 "NET REDIR - LOCK/UNLOCK REGION OF FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x110B, 2), { true,  nullptr,                 "NET REDIR - UNLOCK REGION OF FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x110C, 2), { true,  nullptr,                 "NET REDIR - GET DISK INFORMATION" } },
	{ MAKE_INT_SEL(0x2F, 0x110D, 2), { true,  nullptr,                 "IFSFUNC.EXE - SET REMOTE FILE'S ATTRIBUTES" } },
	{ MAKE_INT_SEL(0x2F, 0x110E, 2), { true,  nullptr,                 "NET REDIR - SET REMOTE FILE'S ATTRIBUTES" } },
	{ MAKE_INT_SEL(0x2F, 0x110F, 2), { true,  nullptr,                 "NET REDIR - GET REMOTE FILE'S ATTRIBUTES AND SIZE" } },
	{ MAKE_INT_SEL(0x2F, 0x1110, 2), { true,  nullptr,                 "IFSFUNC.EXE - GET REMOTE FILE'S ATTRIBUTES AND SIZE" } },
	{ MAKE_INT_SEL(0x2F, 0x1111, 2), { true,  nullptr,                 "NET REDIR - RENAME REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1112, 2), { true,  nullptr,                 "IFSFUNC.EXE - RENAME REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1113, 2), { true,  nullptr,                 "NET REDIR - DELETE REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1114, 2), { true,  nullptr,                 "IFSFUNC.EXE - DELETE REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1115, 2), { true,  nullptr,                 "IFSFUNC.EXE - OPEN REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1116, 2), { true,  &CPUDebugger::INT_2F_1116,"NET REDIR - OPEN EXISTING REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1117, 2), { true,  nullptr,                 "NET REDIR - CREATE/TRUNCATE REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1118, 2), { true,  nullptr,                 "NET REDIR - CREATE/TRUNCATE FILE WITHOUT CDS" } },
	{ MAKE_INT_SEL(0x2F, 0x1119, 2), { true,  nullptr,                 "NET REDIR - FIND FIRST FILE WITHOUT CDS" } },
	{ MAKE_INT_SEL(0x2F, 0x111A, 2), { true,  nullptr,                 "IFSFUNC.EXE - FIND NEXT FILE WITHOUT CDS" } },
	{ MAKE_INT_SEL(0x2F, 0x111B, 2), { true,  nullptr,                 "NET REDIR - FINDFIRST" } },
	{ MAKE_INT_SEL(0x2F, 0x111C, 2), { true,  nullptr,                 "NET REDIR - FINDNEXT" } },
	{ MAKE_INT_SEL(0x2F, 0x111D, 2), { true,  nullptr,                 "NET REDIR - CLOSE ALL REMOTE FILES FOR PROCESS (ABORT)" } },
	{ MAKE_INT_SEL(0x2F, 0x111E, 2), { true,  nullptr,                 "NET REDIR - DO REDIRECTION" } },
	{ MAKE_INT_SEL(0x2F, 0x111F, 2), { true,  nullptr,                 "NET REDIR - PRINTER SETUP" } },
	{ MAKE_INT_SEL(0x2F, 0x1120, 2), { true,  nullptr,                 "NET REDIR - FLUSH ALL DISK BUFFERS" } },
	{ MAKE_INT_SEL(0x2F, 0x1121, 2), { true,  nullptr,                 "NET REDIR - SEEK FROM END OF REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1122, 2), { true,  nullptr,                 "NET REDIR - PROCESS TERMINATION HOOK" } },
	{ MAKE_INT_SEL(0x2F, 0x1123, 2), { true,  &CPUDebugger::INT_2F_1123,"NET REDIR - QUALIFY REMOTE FILENAME" } },
	{ MAKE_INT_SEL(0x2F, 0x1124, 2), { true,  nullptr,                 "NET REDIR - TURN OFF REMOTE PRINTER" } },
	{ MAKE_INT_SEL(0x2F, 0x1125, 2), { true,  nullptr,                 "NET REDIR - REDIRECTED PRINTER MODE" } },
	{ MAKE_INT_SEL(0x2F, 0x1126, 2), { true,  nullptr,                 "NETWORK REDIRECTOR - REMOTE PRINTER ECHO ON/OFF" } },
	{ MAKE_INT_SEL(0x2F, 0x112A, 2), { true,  nullptr,                 "IFSFUNC.EXE - CLOSE ALL FILES FOR PROCESS" } },
	{ MAKE_INT_SEL(0x2F, 0x112B, 2), { true,  nullptr,                 "IFSFUNC.EXE - GENERIC IOCTL" } },
	{ MAKE_INT_SEL(0x2F, 0x112C, 2), { true,  nullptr,                 "NET REDIR - UPDATE_CB - ???" } },
	{ MAKE_INT_SEL(0x2F, 0x112D, 2), { true,  nullptr,                 "IFSFUNC.EXE - EXTENDED ATTRIBUTES" } },
	{ MAKE_INT_SEL(0x2F, 0x112E, 2), { true,  nullptr,                 "NET REDIR - EXTENDED OPEN/CREATE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x112F, 2), { true,  nullptr,                 "IFSFUNC.EXE - IFS IOCTL" } },
	{ MAKE_INT_SEL(0x2F, 0x1130, 2), { true,  nullptr,                 "IFSFUNC.EXE - GET IFSFUNC SEGMENT" } },
	{ MAKE_INT_SEL(0x2F, 0x1200, 2), { false, nullptr,                 "DOS - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1201, 2), { false, nullptr,                 "DOS - CLOSE CURRENT FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1202, 2), { false, nullptr,                 "DOS - GET INTERRUPT ADDRESS" } },
	{ MAKE_INT_SEL(0x2F, 0x1203, 2), { false, nullptr,                 "DOS - GET DOS DATA SEGMENT" } },
	{ MAKE_INT_SEL(0x2F, 0x1204, 2), { false, nullptr,                 "DOS - NORMALIZE PATH SEPARATOR" } },
	{ MAKE_INT_SEL(0x2F, 0x1205, 2), { false, nullptr,                 "DOS - OUTPUT CHARACTER TO STANDARD OUTPUT" } },
	{ MAKE_INT_SEL(0x2F, 0x1206, 2), { false, nullptr,                 "DOS - INVOKE CRITICAL ERROR" } },
	{ MAKE_INT_SEL(0x2F, 0x1207, 2), { false, nullptr,                 "DOS - MAKE DISK BUFFER MOST-RECENTLY USED" } },
	{ MAKE_INT_SEL(0x2F, 0x1208, 2), { false, nullptr,                 "DOS - DECREMENT SFT REFERENCE COUNT" } },
	{ MAKE_INT_SEL(0x2F, 0x1209, 2), { false, nullptr,                 "DOS - FLUSH AND FREE DISK BUFFER" } },
	{ MAKE_INT_SEL(0x2F, 0x120A, 2), { false, nullptr,                 "DOS - PERFORM CRITICAL ERROR INTERRUPT" } },
	{ MAKE_INT_SEL(0x2F, 0x120B, 2), { false, nullptr,                 "DOS - SIGNAL SHARING VIOLATION TO USER" } },
	{ MAKE_INT_SEL(0x2F, 0x120C, 2), { false, nullptr,                 "DOS - OPEN DEVICE AND SET SFT OWNER/MODE" } },
	{ MAKE_INT_SEL(0x2F, 0x120D, 2), { false, nullptr,                 "DOS - GET DATE AND TIME" } },
	{ MAKE_INT_SEL(0x2F, 0x120E, 2), { false, nullptr,                 "DOS - MARK ALL DISK BUFFERS UNREFERENCED" } },
	{ MAKE_INT_SEL(0x2F, 0x120F, 2), { false, nullptr,                 "DOS - MAKE BUFFER MOST RECENTLY USED" } },
	{ MAKE_INT_SEL(0x2F, 0x1210, 2), { false, nullptr,                 "DOS - FIND UNREFERENCED DISK BUFFER" } },
	{ MAKE_INT_SEL(0x2F, 0x1211, 2), { false, nullptr,                 "DOS - NORMALIZE ASCIZ FILENAME" } },
	{ MAKE_INT_SEL(0x2F, 0x1212, 2), { false, nullptr,                 "DOS - GET LENGTH OF ASCIZ STRING" } },
	{ MAKE_INT_SEL(0x2F, 0x1213, 2), { false, nullptr,                 "DOS - UPPERCASE CHARACTER" } },
	{ MAKE_INT_SEL(0x2F, 0x1214, 2), { false, nullptr,                 "DOS - COMPARE FAR POINTERS" } },
	{ MAKE_INT_SEL(0x2F, 0x1215, 2), { false, nullptr,                 "DOS - FLUSH BUFFER" } },
	{ MAKE_INT_SEL(0x2F, 0x1216, 2), { false, nullptr,                 "DOS - GET ADDRESS OF SYSTEM FILE TABLE ENTRY" } },
	{ MAKE_INT_SEL(0x2F, 0x1217, 2), { false, nullptr,                 "DOS - GET CURRENT DIR STRUCTURE FOR DRIVE" } },
	{ MAKE_INT_SEL(0x2F, 0x1218, 2), { false, nullptr,                 "DOS - GET CALLER'S REGISTERS" } },
	{ MAKE_INT_SEL(0x2F, 0x1219, 2), { false, nullptr,                 "DOS - SET DRIVE???" } },
	{ MAKE_INT_SEL(0x2F, 0x121A, 2), { false, nullptr,                 "DOS - GET FILE'S DRIVE" } },
	{ MAKE_INT_SEL(0x2F, 0x121B, 2), { false, nullptr,                 "DOS - SET YEAR/LENGTH OF FEBRUARY" } },
	{ MAKE_INT_SEL(0x2F, 0x121C, 2), { false, nullptr,                 "DOS - CHECKSUM MEMORY" } },
	{ MAKE_INT_SEL(0x2F, 0x121D, 2), { false, nullptr,                 "DOS - SUM MEMORY" } },
	{ MAKE_INT_SEL(0x2F, 0x121E, 2), { false, nullptr,                 "DOS - COMPARE FILENAMES" } },
	{ MAKE_INT_SEL(0x2F, 0x121F, 2), { false, nullptr,                 "DOS - BUILD CURRENT DIRECTORY STRUCTURE" } },
	{ MAKE_INT_SEL(0x2F, 0x1220, 2), { false, nullptr,                 "DOS - GET JOB FILE TABLE ENTRY" } },
	{ MAKE_INT_SEL(0x2F, 0x1221, 2), { false, nullptr,                 "DOS - CANONICALIZE FILE NAME" } },
	{ MAKE_INT_SEL(0x2F, 0x1222, 2), { false, nullptr,                 "DOS - SET EXTENDED ERROR INFO" } },
	{ MAKE_INT_SEL(0x2F, 0x1223, 2), { false, nullptr,                 "DOS - CHECK IF CHARACTER DEVICE" } },
	{ MAKE_INT_SEL(0x2F, 0x1224, 2), { false, nullptr,                 "DOS - SHARING RETRY DELAY" } },
	{ MAKE_INT_SEL(0x2F, 0x1225, 2), { false, nullptr,                 "DOS - GET LENGTH OF ASCIZ STRING" } },
	{ MAKE_INT_SEL(0x2F, 0x1226, 2), { false, nullptr,                 "DOS - OPEN FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1227, 2), { false, nullptr,                 "DOS - CLOSE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1228, 2), { false, nullptr,                 "DOS - MOVE FILE POINTER" } },
	{ MAKE_INT_SEL(0x2F, 0x1229, 2), { false, nullptr,                 "DOS - READ FROM FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x122A, 2), { false, nullptr,                 "DOS - SET FASTOPEN ENTRY POINT" } },
	{ MAKE_INT_SEL(0x2F, 0x122B, 2), { false, nullptr,                 "DOS - IOCTL" } },
	{ MAKE_INT_SEL(0x2F, 0x122C, 2), { false, nullptr,                 "DOS - GET DEVICE CHAIN" } },
	{ MAKE_INT_SEL(0x2F, 0x122D, 2), { false, nullptr,                 "DOS - GET EXTENDED ERROR CODE" } },
	{ MAKE_INT_SEL(0x2F, 0x122E, 2), { false, nullptr,                 "DOS - GET OR SET ERROR TABLE ADDRESSES" } },
	{ MAKE_INT_SEL(0x2F, 0x122F, 2), { false, nullptr,                 "DOS - SET DOS VERSION NUMBER TO RETURN" } },
	{ MAKE_INT_SEL(0x2F, 0x1300, 1), { true,  nullptr,                 "DOS - SET DISK INTERRUPT HANDLER" } },
	{ MAKE_INT_SEL(0x2F, 0x1400, 2), { true,  nullptr,                 "NLSFUNC.COM - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1401, 2), { true,  nullptr,                 "NLSFUNC.COM - CHANGE CODE PAGE" } },
	{ MAKE_INT_SEL(0x2F, 0x1402, 2), { true,  nullptr,                 "NLSFUNC.COM - GET EXTENDED COUNTRY INFO" } },
	{ MAKE_INT_SEL(0x2F, 0x1403, 2), { true,  nullptr,                 "NLSFUNC.COM - SET CODE PAGE" } },
	{ MAKE_INT_SEL(0x2F, 0x1404, 2), { true,  nullptr,                 "NLSFUNC.COM - GET COUNTRY INFO" } },
	{ MAKE_INT_SEL(0x2F, 0x1500, 2), { true,  nullptr,                 "GRAPHICS.COM / CD-ROM - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1500, 2), { true,  nullptr,                 "CD-ROM - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1501, 2), { true,  nullptr,                 "CD-ROM - GET DRIVE DEVICE LIST" } },
	{ MAKE_INT_SEL(0x2F, 0x1502, 2), { true,  nullptr,                 "CD-ROM - GET COPYRIGHT FILE NAME" } },
	{ MAKE_INT_SEL(0x2F, 0x1503, 2), { true,  nullptr,                 "CD-ROM - GET ABSTRACT FILE NAME" } },
	{ MAKE_INT_SEL(0x2F, 0x1504, 2), { true,  nullptr,                 "CD-ROM - GET BIBLIOGRAPHIC DOC FILE NAME" } },
	{ MAKE_INT_SEL(0x2F, 0x1505, 2), { true,  nullptr,                 "CD-ROM - READ VTOC" } },
	{ MAKE_INT_SEL(0x2F, 0x1506, 2), { true,  nullptr,                 "CD-ROM - TURN DEBUGGING ON" } },
	{ MAKE_INT_SEL(0x2F, 0x1507, 2), { true,  nullptr,                 "CD-ROM - TURN DEBUGGING OFF" } },
	{ MAKE_INT_SEL(0x2F, 0x1508, 2), { true,  nullptr,                 "CD-ROM - ABSOLUTE DISK READ" } },
	{ MAKE_INT_SEL(0x2F, 0x1509, 2), { true,  nullptr,                 "CD-ROM - ABSOLUTE DISK WRITE" } },
	{ MAKE_INT_SEL(0x2F, 0x150A, 2), { true,  nullptr,                 "CD-ROM - RESERVED" } },
	{ MAKE_INT_SEL(0x2F, 0x150B, 2), { true,  nullptr,                 "CD-ROM - DRIVE CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x150C, 2), { true,  nullptr,                 "CD-ROM - GET MSCDEX.EXE VERSION" } },
	{ MAKE_INT_SEL(0x2F, 0x150D, 2), { true,  nullptr,                 "CD-ROM - GET CD-ROM DRIVE LETTERS" } },
	{ MAKE_INT_SEL(0x2F, 0x150E, 2), { true,  nullptr,                 "CD-ROM - GET/SET VOLUME DESCRIPTOR PREFERENCE" } },
	{ MAKE_INT_SEL(0x2F, 0x150F, 2), { true,  nullptr,                 "CD-ROM - GET DIRECTORY ENTRY" } },
	{ MAKE_INT_SEL(0x2F, 0x1510, 2), { true,  nullptr,                 "CD-ROM - SEND DEVICE DRIVER REQUEST" } },
	{ MAKE_INT_SEL(0x2F, 0x1600, 2), { true,  nullptr,                 "Windows - WINDOWS ENHANCED MODE INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1602, 2), { true,  nullptr,                 "Windows - GET API ENTRY POINT" } },
	{ MAKE_INT_SEL(0x2F, 0x1603, 2), { true,  nullptr,                 "Windows - GET INSTANCE DATA" } },
	{ MAKE_INT_SEL(0x2F, 0x1605, 2), { true,  nullptr,                 "Windows - WINDOWS ENHANCED MODE & 286 DOSX INIT BROADCAST" } },
	{ MAKE_INT_SEL(0x2F, 0x1606, 2), { true,  nullptr,                 "Windows - WINDOWS ENHANCED MODE & 286 DOSX EXIT BROADCAST" } },
	{ MAKE_INT_SEL(0x2F, 0x1607, 2), { true,  nullptr,                 "Windows - VIRTUAL DEVICE CALL OUT API" } },
	{ MAKE_INT_SEL(0x2F, 0x1608, 2), { true,  nullptr,                 "Windows - WINDOWS ENHANCED MODE INIT COMPLETE BROADCAST" } },
	{ MAKE_INT_SEL(0x2F, 0x1609, 2), { true,  nullptr,                 "Windows - WINDOWS ENHANCED MODE BEGIN EXIT BROADCAST" } },
	{ MAKE_INT_SEL(0x2F, 0x160A, 2), { true,  nullptr,                 "Windows - IDENTIFY WINDOWS VERSION AND TYPE" } },
	{ MAKE_INT_SEL(0x2F, 0x160B, 2), { true,  nullptr,                 "Windows - IDENTIFY TSRs" } },
	{ MAKE_INT_SEL(0x2F, 0x160C, 2), { true,  nullptr,                 "Windows - DETECT ROMs" } },
	{ MAKE_INT_SEL(0x2F, 0x1680, 2), { true,  nullptr,                 "Windows, DPMI - RELEASE CURRENT VIRTUAL MACHINE TIME-SLICE" } },
	{ MAKE_INT_SEL(0x2F, 0x1681, 2), { true,  nullptr,                 "Windows - BEGIN CRITICAL SECTION" } },
	{ MAKE_INT_SEL(0x2F, 0x1682, 2), { true,  nullptr,                 "Windows - END CRITICAL SECTION" } },
	{ MAKE_INT_SEL(0x2F, 0x1683, 2), { true,  nullptr,                 "Windows - GET CURRENT VIRTUAL MACHINE ID" } },
	{ MAKE_INT_SEL(0x2F, 0x1684, 2), { true,  nullptr,                 "Windows - GET DEVICE API ENTRY POINT" } },
	{ MAKE_INT_SEL(0x2F, 0x1685, 2), { true,  nullptr,                 "Windows - SWITCH VMs AND CALLBACK" } },
	{ MAKE_INT_SEL(0x2F, 0x1686, 2), { true,  nullptr,                 "DPMI - DETECT MODE" } },
	{ MAKE_INT_SEL(0x2F, 0x1687, 2), { true,  nullptr,                 "DPMI - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1688, 2), { true,  nullptr,                 "Windows - GET ALIAS SELECTOR TO LDT" } },
	{ MAKE_INT_SEL(0x2F, 0x1689, 2), { false, nullptr,                 "Windows - KERNEL IDLE CALL" } },
	{ MAKE_INT_SEL(0x2F, 0x168A, 2), { true,  nullptr,                 "DPMI - GET VENDOR-SPECIFIC API ENTRY POINT" } },
	{ MAKE_INT_SEL(0x2F, 0x168B, 2), { true,  nullptr,                 "Windows - SET FOCUS TO SPECIFIED VIRTUAL MACHINE" } },
	{ MAKE_INT_SEL(0x2F, 0x168C, 2), { true,  nullptr,                 "Windows - RESTART COMMAND" } },
	{ MAKE_INT_SEL(0x2F, 0x1900, 2), { true,  nullptr,                 "SHELLB.COM - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1901, 2), { true,  nullptr,                 "SHELLB.COM - SHELLC.EXE INTERFACE" } },
	{ MAKE_INT_SEL(0x2F, 0x1902, 2), { true,  nullptr,                 "SHELLB.COM - COMMAND.COM INTERFACE" } },
	{ MAKE_INT_SEL(0x2F, 0x1903, 2), { true,  nullptr,                 "SHELLB.COM - COMMAND.COM interface" } },
	{ MAKE_INT_SEL(0x2F, 0x1904, 2), { true,  nullptr,                 "SHELLB.COM - SHELLB transient to TSR interface" } },
	{ MAKE_INT_SEL(0x2F, 0x1980, 2), { true,  nullptr,                 "IBM ROM-DOS v4.0 - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1981, 2), { true,  nullptr,                 "IBM ROM-DOS v4.0 - GET ??? STRING" } },
	{ MAKE_INT_SEL(0x2F, 0x1982, 2), { true,  nullptr,                 "IBM ROM-DOS v4.0 - GET ??? TABLE" } },
	{ MAKE_INT_SEL(0x2F, 0x1A00, 2), { true,  nullptr,                 "ANSI.SYS - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1A01, 2), { false, nullptr,                 "ANSI.SYS - GET/SET DISPLAY INFORMATION" } },
	{ MAKE_INT_SEL(0x2F, 0x1A02, 2), { false, nullptr,                 "ANSI.SYS - MISCELLANEOUS REQUESTS" } },
	{ MAKE_INT_SEL(0x2F, 0x4000, 2), { true,  nullptr,                 "Windows - GET VIRTUAL DEVICE DRIVER (VDD) CAPABILTIES" } },
	{ MAKE_INT_SEL(0x2F, 0x4001, 2), { true,  nullptr,                 "OS/2 compatibility box - SWITCHING DOS TO BACKGROUND" } },
	{ MAKE_INT_SEL(0x2F, 0x4002, 2), { true,  nullptr,                 "OS/2 compatibility box - SWITCHING DOS TO FOREGROUND" } },
	{ MAKE_INT_SEL(0x2F, 0x4003, 2), { false, nullptr,                 "Windows - ENTERING VIDEO DRIVER CRITICAL SECTION" } },
	{ MAKE_INT_SEL(0x2F, 0x4004, 2), { false, nullptr,                 "Windows - EXITING VIDEO DRIVER CRITICAL SECTION" } },
	{ MAKE_INT_SEL(0x2F, 0x4005, 2), { true,  nullptr,                 "Windows - SWITCHING DOS TO BACKGROUND" } },
	{ MAKE_INT_SEL(0x2F, 0x4006, 2), { true,  nullptr,                 "Windows - SWITCHING DOS TO FOREGROUND" } },
	{ MAKE_INT_SEL(0x2F, 0x4007, 2), { true,  nullptr,                 "Windows - ENABLE VDD TRAPPING OF VIDEO REGISTERS" } },
	{ MAKE_INT_SEL(0x2F, 0x4010, 2), { true,  nullptr,                 "OS/2 - INSTALLATION CHECK / GET VERSION" } },
	{ MAKE_INT_SEL(0x2F, 0x4011, 2), { true,  nullptr,                 "OS/2 - GET VDD API ENTRY POINT" } },
	{ MAKE_INT_SEL(0x2F, 0x4300, 2), { true,  nullptr,                 "HIMEM.SYS - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x4308, 2), { true,  nullptr,                 "HIMEM.SYS - GET A20 HANDLER NUMBER" } },
	{ MAKE_INT_SEL(0x2F, 0x4309, 2), { true,  nullptr,                 "HIMEM.SYS - GET XMS HANDLE TABLE" } },
	{ MAKE_INT_SEL(0x2F, 0x4310, 2), { true,  nullptr,                 "HIMEM.SYS - GET DRIVER ADDRESS" } },
	{ MAKE_INT_SEL(0x2F, 0x4320, 2), { true,  nullptr,                 "HIMEM.SYS - Mach 20 SUPPORT" } },
	{ MAKE_INT_SEL(0x2F, 0x4330, 2), { true,  nullptr,                 "HIMEM.SYS - GET EXTERNAL A20 HANDLER ADDRESS" } },
	{ MAKE_INT_SEL(0x2F, 0x43E0, 2), { true,  nullptr,                 "DPMS - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x43E1, 2), { true,  nullptr,                 "DPMS - REGISTER CLIENT" } },
	{ MAKE_INT_SEL(0x2F, 0x43E2, 2), { true,  nullptr,                 "DPMS - ENABLE/DISABLE DPMS" } },
	{ MAKE_INT_SEL(0x2F, 0x43E3, 2), { true,  nullptr,                 "DPMS - DPMS STARTUP BROADCAST" } },
	{ MAKE_INT_SEL(0x2F, 0x43E4, 2), { true,  nullptr,                 "DPMS - DPMS EXIT BROADCAST" } },
	{ MAKE_INT_SEL(0x2F, 0x4680, 2), { true,  nullptr,                 "Windows - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x4800, 2), { true,  nullptr,                 "DOSKEY - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x4810, 2), { true,  nullptr,                 "DOSKEY - READ INPUT LINE FROM CONSOLE" } },
	{ MAKE_INT_SEL(0x2F, 0x4900, 1), { true,  nullptr,                 "DOS - SETUP" } },
	{ MAKE_INT_SEL(0x2F, 0x4A00, 2), { true,  nullptr,                 "DOS - FLOPPY-DISK LOGICAL DRIVE CHANGE NOTIFICATION" } },
	{ MAKE_INT_SEL(0x2F, 0x4A01, 2), { true,  nullptr,                 "DOS - QUERY FREE HMA SPACE" } },
	{ MAKE_INT_SEL(0x2F, 0x4A02, 2), { true,  nullptr,                 "DOS - ALLOCATE HMA SPACE" } },
	{ MAKE_INT_SEL(0x2F, 0x4A05, 2), { true,  nullptr,                 "DOSSHELL - TASK SWITCHING API???" } },
	{ MAKE_INT_SEL(0x2F, 0x4A06, 2), { true,  nullptr,                 "DOS - DOS SUPERVISOR REBOOT PANEL - ADJUST MEMORY SIZE" } },
	{ MAKE_INT_SEL(0x2F, 0x4A10, 2), { true,  nullptr,                 "SMARTDRV.EXE" } },
	{ MAKE_INT_SEL(0x2F, 0x4A11, 2), { true,  nullptr,                 "DBLSPACE.BIN" } },
	{ MAKE_INT_SEL(0x2F, 0x4A15, 2), { true,  nullptr,                 "EMM386.EXE - INSTALL I/O VIRTUALIZATION HANDLER" } },
	{ MAKE_INT_SEL(0x2F, 0x4B01, 2), { true,  nullptr,                 "DOS TASK SWITCHER - BUILD CALLOUT CHAIN" } },
	{ MAKE_INT_SEL(0x2F, 0x4B02, 2), { true,  nullptr,                 "DOS TASK SWITCHER - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x4B03, 2), { true,  nullptr,                 "DOS TASK SWITCHER - ALLOCATE SWITCHER ID" } },
	{ MAKE_INT_SEL(0x2F, 0x4B04, 2), { true,  nullptr,                 "DOS TASK SWITCHER - FREE SWITCHER ID" } },
	{ MAKE_INT_SEL(0x2F, 0x4B05, 2), { true,  nullptr,                 "DOS TASK SWITCHER - IDENTIFY INSTANCE DATA" } },
	{ MAKE_INT_SEL(0x2F, 0x4B06, 2), { true,  nullptr,                 "Windows - WIN.COM - GET ??? POINTER TO WIN.COM" } },
	{ MAKE_INT_SEL(0x2F, 0x4B20, 2), { true,  nullptr,                 "Windows - WIN.COM - SET PROGRAM TO EXECUTE ON EXIT" } },
	{ MAKE_INT_SEL(0x2F, 0x4B80, 2), { true,  nullptr,                 "Windows - WSWAP.EXE - RESET INTERNAL VARIABLES" } },
	{ MAKE_INT_SEL(0x2F, 0x5500, 2), { true,  nullptr,                 "COMMAND.COM INTERFACE" } },
	{ MAKE_INT_SEL(0x2F, 0x5501, 2), { true,  nullptr,                 "ROM COMMAND.COM INTERFACE" } },
	{ MAKE_INT_SEL(0x2F, 0xAD00, 2), { true,  nullptr,                 "DISPLAY.SYS - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xAD01, 2), { true,  nullptr,                 "DISPLAY.SYS - SET ACTIVE CODE PAGE" } },
	{ MAKE_INT_SEL(0x2F, 0xAD02, 2), { true,  nullptr,                 "DISPLAY.SYS - GET ACTIVE CODE PAGE" } },
	{ MAKE_INT_SEL(0x2F, 0xAD03, 2), { true,  nullptr,                 "DISPLAY.SYS - GET CODE PAGE INFORMATION" } },
	{ MAKE_INT_SEL(0x2F, 0xAD04, 2), { true,  nullptr,                 "DISPLAY.SYS - ???" } },
	{ MAKE_INT_SEL(0x2F, 0xAD10, 2), { true,  nullptr,                 "DISPLAY.SYS - ???" } },
	{ MAKE_INT_SEL(0x2F, 0xAD10, 2), { true,  nullptr,                 "DISPLAY.SYS - ???" } },
	{ MAKE_INT_SEL(0x2F, 0xAD80, 2), { true,  nullptr,                 "KEYB.COM - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xAD81, 2), { true,  nullptr,                 "KEYB.COM - SET KEYBOARD CODE PAGE" } },
	{ MAKE_INT_SEL(0x2F, 0xAD82, 2), { true,  nullptr,                 "KEYB.COM - SET KEYBOARD MAPPING" } },
	{ MAKE_INT_SEL(0x2F, 0xAD83, 2), { true,  nullptr,                 "KEYB.COM - GET KEYBOARD MAPPING" } },
	{ MAKE_INT_SEL(0x2F, 0xAD84, 2), { true,  nullptr,                 "KEYB.COM - SET KEYBOARD SUB-MAPPING" } },
	{ MAKE_INT_SEL(0x2F, 0xAD85, 2), { true,  nullptr,                 "KEYB.COM - GET KEYBOARD SUB-MAPPING" } },
	{ MAKE_INT_SEL(0x2F, 0xADC1, 2), { true,  nullptr,                 "DOS SELECT - DISPLAY FORMAT DISK PROMPT" } },
	{ MAKE_INT_SEL(0x2F, 0xAE00, 2), { true,  nullptr,                 "DOS - INSTALLABLE COMMAND - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xAE01, 2), { true,  nullptr,                 "DOS - INSTALLABLE COMMAND - EXECUTE" } },
	{ MAKE_INT_SEL(0x2F, 0xB000, 2), { true,  nullptr,                 "GRAFTABL.COM - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xB001, 2), { true,  nullptr,                 "GRAFTABL.COM - GET GRAPHICS FONT TABLE" } },
	{ MAKE_INT_SEL(0x2F, 0xB700, 2), { true,  nullptr,                 "APPEND - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xB701, 2), { true,  nullptr,                 "APPEND - GET APPEND PATH" } },
	{ MAKE_INT_SEL(0x2F, 0xB702, 2), { true,  nullptr,                 "APPEND - GET VERSION" } },
	{ MAKE_INT_SEL(0x2F, 0xB703, 2), { true,  nullptr,                 "APPEND - HOOK INT 21" } },
	{ MAKE_INT_SEL(0x2F, 0xB704, 2), { true,  nullptr,                 "APPEND - GET APPEND PATH" } },
	{ MAKE_INT_SEL(0x2F, 0xB706, 2), { true,  nullptr,                 "APPEND - GET APPEND FUNCTION STATE" } },
	{ MAKE_INT_SEL(0x2F, 0xB707, 2), { true,  nullptr,                 "APPEND - SET APPEND FUNCTION STATE" } },
	{ MAKE_INT_SEL(0x2F, 0xB710, 2), { true,  nullptr,                 "APPEND - GET VERSION INFO" } },
	{ MAKE_INT_SEL(0x2F, 0xB711, 2), { true,  nullptr,                 "DOS - SET RETURN FOUND NAME STATE" } },
	{ MAKE_INT_SEL(0x2F, 0xB800, 2), { true,  nullptr,                 "NETWORK - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xB803, 2), { true,  nullptr,                 "NETWORK - GET NETWORK EVENT POST HANDLER" } },
	{ MAKE_INT_SEL(0x2F, 0xB804, 2), { true,  nullptr,                 "NETWORK - SET NETWORK EVENT POST HANDLER" } },
	{ MAKE_INT_SEL(0x2F, 0xB807, 2), { true,  nullptr,                 "NETWORK - GET NetBIOS NAME NUMBER OF MACHINE NAME" } },
	{ MAKE_INT_SEL(0x2F, 0xB808, 2), { true,  nullptr,                 "NETWORK - RELINK KEYBOARD HANDLER" } },
	{ MAKE_INT_SEL(0x2F, 0xB809, 2), { true,  nullptr,                 "NETWORK - GET VERSION" } },
	{ MAKE_INT_SEL(0x2F, 0xBC00, 2), { true,  nullptr,                 "EGA.SYS - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xBC06, 2), { true,  nullptr,                 "EGA.SYS - GET VERSION INFO" } },
	/* INT 30 */
	{ MAKE_INT_SEL(0x30, 0x0000, 0), { false, nullptr,                 "Windows - PROTECTED-MODE CALLBACK" } },
	/* INT 33 */
	{ MAKE_INT_SEL(0x33, 0x0000, 2), { true,  nullptr,                 "MS MOUSE - RESET DRIVER AND READ STATUS" } },
	{ MAKE_INT_SEL(0x33, 0x0001, 2), { true,  nullptr,                 "MS MOUSE - SHOW MOUSE CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x0002, 2), { true,  nullptr,                 "MS MOUSE - HIDE MOUSE CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x0003, 2), { true,  nullptr,                 "MS MOUSE - RETURN POSITION AND BUTTON STATUS" } },
	{ MAKE_INT_SEL(0x33, 0x0007, 2), { true,  nullptr,                 "MS MOUSE - DEFINE HORIZONTAL CURSOR RANGE" } },
	{ MAKE_INT_SEL(0x33, 0x0008, 2), { true,  nullptr,                 "MS MOUSE - DEFINE VERTICAL CURSOR RANGE" } },
	{ MAKE_INT_SEL(0x33, 0x0009, 2), { true,  nullptr,                 "MS MOUSE - DEFINE GRAPHICS CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x000A, 2), { true,  nullptr,                 "MS MOUSE - DEFINE TEXT CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x000C, 2), { true,  nullptr,                 "MS MOUSE - DEFINE INTERRUPT SUBROUTINE PARAMETERS" } },
	{ MAKE_INT_SEL(0x33, 0x0021, 2), { true,  nullptr,                 "MS MOUSE - SOFTWARE RESET" } },
	{ MAKE_INT_SEL(0x33, 0x0024, 2), { true,  nullptr,                 "MS MOUSE - GET SOFTWARE VERSION, MOUSE TYPE, AND IRQ NUMBER" } },
	{ MAKE_INT_SEL(0x33, 0x0026, 2), { true,  nullptr,                 "MS MOUSE - GET MAXIMUM VIRTUAL COORDINATES" } },
	{ MAKE_INT_SEL(0x33, 0x006D, 2), { true,  nullptr,                 "MS MOUSE - GET VERSION STRING" } },
	/* INT 40 */
	{ MAKE_INT_SEL(0x40, 0x0000, 0), { true,  nullptr,                 "DISKETTE - ROM BIOS DISKETTE HANDLER RELOCATED BY HARD DISK BIOS" } }
};
