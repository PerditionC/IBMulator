/*
 * Copyright (C) 2018  Marco Bortolin
 *
 * This file is part of IBMulator.
 *
 * IBMulator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IBMulator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with IBMulator.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "ibmulator.h"
#include "../debugger.h"


int_map_t CPUDebugger::ms_interrupts = {
	/* INT 10 */
	{ MAKE_INT_SEL(0x10, 0x0000, 1), { true,  &CPUDebugger::INT_10_00, "VIDEO - SET VIDEO MODE" } },
	{ MAKE_INT_SEL(0x10, 0x0100, 1), { true,  nullptr,                 "VIDEO - SET TEXT-MODE CURSOR SHAPE" } },
	{ MAKE_INT_SEL(0x10, 0x0E00, 1), { false, &CPUDebugger::INT_10,    "VIDEO - TELETYPE OUTPUT" } },
	{ MAKE_INT_SEL(0x10, 0x0200, 1), { false, nullptr,                 "VIDEO - SET CURSOR POS" } },
	{ MAKE_INT_SEL(0x10, 0x0900, 1), { false, &CPUDebugger::INT_10,    "VIDEO - WRITE CHAR AND ATTR AT CURSOR POS" } },
	{ MAKE_INT_SEL(0x10, 0x0F00, 1), { true,  nullptr,                 "VIDEO - GET CURRENT VIDEO MODE" } },
	{ MAKE_INT_SEL(0x10, 0x1003, 2), { true,  nullptr,                 "VIDEO - TOGGLE INTENSITY/BLINKING BIT" } },
	{ MAKE_INT_SEL(0x10, 0x1007, 2), { true,  nullptr,                 "VIDEO - GET INDIVIDUAL PALETTE REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0x101A, 2), { true,  nullptr,                 "VIDEO - GET VIDEO DAC COLOR-PAGE STATE (VGA)" } },
	{ MAKE_INT_SEL(0x10, 0x1100, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - LOAD USER-SPECIFIED PATTERNS" } },
	{ MAKE_INT_SEL(0x10, 0x1103, 2), { true,  nullptr,                 "VIDEO - TEXT-MODE CHARGEN - SET BLOCK SPECIFIER" } },
	{ MAKE_INT_SEL(0x10, 0x1122, 2), { true,  nullptr,                 "VIDEO - GRAPH-MODE CHARGEN - SET ROM 8x14 GRAPHICS CHARS" } },
	{ MAKE_INT_SEL(0x10, 0x1130, 2), { true,  nullptr,                 "VIDEO - GET FONT INFORMATION" } },
	{ MAKE_INT_SEL(0x10, 0x1200, 1), { true,  &CPUDebugger::INT_10_12, "" } },
	{ MAKE_INT_SEL(0x10, 0x1300, 1), { true,  &CPUDebugger::INT_10,    "VIDEO - WRITE STRING" } },
	{ MAKE_INT_SEL(0x10, 0x1A00, 2), { true,  nullptr,                 "VIDEO - GET DISPLAY COMBINATION CODE" } },
	{ MAKE_INT_SEL(0x10, 0x1B00, 2), { true,  nullptr,                 "VIDEO - FUNCTIONALITY/STATE INFORMATION" } },
	{ MAKE_INT_SEL(0x10, 0x6F00, 2), { true,  nullptr,                 "VIDEO - Video7 VGA,VEGA VGA - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x10, 0xF000, 1), { true,  nullptr,                 "EGA - READ ONE REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0xF100, 1), { true,  nullptr,                 "EGA - WRITE ONE REGISTER" } },
	{ MAKE_INT_SEL(0x10, 0xF200, 1), { true,  nullptr,                 "EGA - READ REGISTER RANGE" } },
	{ MAKE_INT_SEL(0x10, 0xF300, 1), { true,  nullptr,                 "EGA - WRITE REGISTER RANGE" } },
	{ MAKE_INT_SEL(0x10, 0xFA00, 1), { true,  nullptr,                 "EGA - INTERROGATE DRIVER" } },
	/* INT 11 */
	{ MAKE_INT_SEL(0x11, 0x0000, 0), { true,  nullptr,                 "GET EQUIPMENT LIST" } },
	/* INT 12 */
	{ MAKE_INT_SEL(0x12, 0x0000, 0), { false, nullptr,                 "BIOS - GET MEMORY SIZE" } },
	/* INT 13 */
	{ MAKE_INT_SEL(0x13, 0x0000, 1), { true,  &CPUDebugger::INT_13,    "DISK - RESET DISK SYSTEM" } },
	{ MAKE_INT_SEL(0x13, 0x0200, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"DISK - READ SECTOR(S) INTO MEMORY" } },
	{ MAKE_INT_SEL(0x13, 0x0300, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"DISK - WRITE DISK SECTOR(S)" } },
	{ MAKE_INT_SEL(0x13, 0x0400, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"DISK - VERIFY DISK SECTOR(S)" } },
	{ MAKE_INT_SEL(0x13, 0x0800, 1), { true,  &CPUDebugger::INT_13,    "DISK - GET DRIVE PARAMETERS" } },
	{ MAKE_INT_SEL(0x13, 0x0900, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - INITIALIZE CONTROLLER WITH DRIVE PARAMETERS" } },
	{ MAKE_INT_SEL(0x13, 0x0C00, 1), { true,  &CPUDebugger::INT_13_02_3_4_C,"HARD DISK - SEEK TO CYLINDER" } },
	{ MAKE_INT_SEL(0x13, 0x1100, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - RECALIBRATE DRIVE" } },
	{ MAKE_INT_SEL(0x13, 0x1400, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - CONTROLLER INTERNAL DIAGNOSTIC" } },
	{ MAKE_INT_SEL(0x13, 0x1500, 1), { true,  &CPUDebugger::INT_13,    "DISK - GET DISK TYPE" } },
	{ MAKE_INT_SEL(0x13, 0x1600, 1), { true,  &CPUDebugger::INT_13,    "FLOPPY - DETECT DISK CHANGE" } },
	{ MAKE_INT_SEL(0x13, 0x1700, 1), { true,  &CPUDebugger::INT_13,    "FLOPPY DISK - SET MEDIA TYPE FOR FORMAT" } },
	{ MAKE_INT_SEL(0x13, 0x1800, 1), { true,  &CPUDebugger::INT_13,    "FLOPPY DISK - SET MEDIA TYPE FOR FORMAT (new)" } },
	{ MAKE_INT_SEL(0x13, 0x2500, 1), { true,  &CPUDebugger::INT_13,    "HARD DISK - IDENTIFY DRIVE (PS/1)" } },
	/* INT 14 */
	{ MAKE_INT_SEL(0x14, 0x0000, 1), { false, nullptr,                 "SERIAL - INITIALIZE PORT" } },
	/* INT 15 */
	{ MAKE_INT_SEL(0x15, 0x2100, 1), { false, nullptr,                 "POWER-ON SELF-TEST ERROR LOG" } },
	{ MAKE_INT_SEL(0x15, 0x2300, 2), { true,  nullptr,                 "IBM - GET CMOS 2D-2E DATA" } },
	{ MAKE_INT_SEL(0x15, 0x2301, 2), { true,  nullptr,                 "IBM - SET CMOS 2D-2E DATA" } },
	{ MAKE_INT_SEL(0x15, 0x2302, 2), { true,  nullptr,                 "IBM - GET ROM STARTUP VIDEO REG TABLES" } },
	{ MAKE_INT_SEL(0x15, 0x2303, 2), { true,  nullptr,                 "IBM - VIDEO graphical func" } },
	{ MAKE_INT_SEL(0x15, 0x2304, 2), { true,  nullptr,                 "IBM - SYSTEM SETUP" } },
	{ MAKE_INT_SEL(0x15, 0x2305, 2), { true,  nullptr,                 "IBM - GET PROCESSOR SPEED" } },
	{ MAKE_INT_SEL(0x15, 0x4F00, 1), { false, nullptr,                 "KEYBOARD INTERCEPT" } },
	{ MAKE_INT_SEL(0x15, 0x8600, 1), { true,  &CPUDebugger::INT_15_86, "BIOS - WAIT" } },
	{ MAKE_INT_SEL(0x15, 0x8700, 1), { true,  &CPUDebugger::INT_15_87, "COPY EXTENDED MEM" } },
	{ MAKE_INT_SEL(0x15, 0x9000, 1), { false, nullptr,                 "OS HOOK - DEVICE BUSY" } },
	{ MAKE_INT_SEL(0x15, 0x9100, 1), { false, nullptr,                 "OS HOOK - DEVICE POST" } },
	{ MAKE_INT_SEL(0x15, 0xC000, 1), { true,  nullptr,                 "GET CONFIGURATION" } },
	{ MAKE_INT_SEL(0x15, 0xC100, 1), { false, nullptr,                 "RETURN EXT-BIOS DATA AREA SEGMENT ADDR" } },
	{ MAKE_INT_SEL(0x15, 0xC200, 2), { true,  nullptr,                 "POINTING DEV - ENABLE/DISABLE" } },
	{ MAKE_INT_SEL(0x15, 0xC201, 2), { true,  nullptr,                 "POINTING DEV - RESET" } },
	{ MAKE_INT_SEL(0x15, 0xC202, 2), { true,  nullptr,                 "POINTING DEV - SET SAMPLING RATE" } },
	{ MAKE_INT_SEL(0x15, 0xC203, 2), { true,  nullptr,                 "POINTING DEV - SET RESOLUTION" } },
	{ MAKE_INT_SEL(0x15, 0xC204, 2), { true,  nullptr,                 "POINTING DEV - GET TYPE" } },
	{ MAKE_INT_SEL(0x15, 0xC205, 2), { true,  nullptr,                 "POINTING DEV - INITIALIZE" } },
	{ MAKE_INT_SEL(0x15, 0xC206, 2), { true,  nullptr,                 "POINTING DEV - EXTENDED COMMANDS" } },
	{ MAKE_INT_SEL(0x15, 0xC207, 2), { true,  nullptr,                 "POINTING DEV - SET DEVICE HANDLER ADDR" } },
	{ MAKE_INT_SEL(0x15, 0xC208, 2), { true,  nullptr,                 "POINTING DEV - WRITE TO POINTER PORT" } },
	{ MAKE_INT_SEL(0x15, 0xC209, 2), { true,  nullptr,                 "POINTING DEV - READ FROM POINTER PORT" } },
	{ MAKE_INT_SEL(0x15, 0xC500, 1), { false, nullptr,                 "IBM - ROM BIOS TRACING CALLOUT" } },
	{ MAKE_INT_SEL(0x15, 0x8800, 1), { false, nullptr,                 "GET EXTENDED MEMORY SIZE" } },
	/* INT 16 */
	{ MAKE_INT_SEL(0x16, 0x0000, 1), { false, nullptr,                 "KEYB - GET KEYSTROKE" } },
	{ MAKE_INT_SEL(0x16, 0x0300, 1), { false, nullptr,                 "KEYB - SET TYPEMATIC RATE AND DELAY" } },
	{ MAKE_INT_SEL(0x16, 0x1100, 1), { false, nullptr,                 "KEYB - CHECK FOR ENHANCED KEYSTROKE" } },
	{ MAKE_INT_SEL(0x16, 0x1200, 1), { false, nullptr,                 "KEYB - GET EXTENDED SHIFT STATES" } },
	/* INT 17 */
	{ MAKE_INT_SEL(0x17, 0x0000, 1), { false, nullptr,                 "PRINTER - WRITE CHARACTER" } },
	{ MAKE_INT_SEL(0x17, 0x0100, 1), { false, nullptr,                 "PRINTER - INITIALIZE PORT" } },
	{ MAKE_INT_SEL(0x17, 0x0200, 1), { false, nullptr,                 "PRINTER - GET STATUS" } },
	/* INT 1A */
	{ MAKE_INT_SEL(0x1A, 0x0000, 1), { false, &CPUDebugger::INT_1A_00, "TIME - GET SYSTEM TIME" } },
	/* INT 1C */
	{ MAKE_INT_SEL(0x1C, 0x0000, 0), { false, nullptr,                 "SYSTEM TIMER TICK" } },
	/* INT 21 */
	{ MAKE_INT_SEL(0x21, 0x0200, 1), { true,  nullptr,                 "DOS - WRITE CHARACTER TO STANDARD OUTPUT" } },
	{ MAKE_INT_SEL(0x21, 0x0600, 1), { false, nullptr,                 "DOS - DIRECT CONSOLE OUTPUT" } },
	{ MAKE_INT_SEL(0x21, 0x0900, 1), { true,  &CPUDebugger::INT_21_09, "DOS - WRITE STRING TO STDOUT" } },
	{ MAKE_INT_SEL(0x21, 0x0A00, 1), { true,  nullptr,                 "DOS - BUFFERED INPUT" } },
	{ MAKE_INT_SEL(0x21, 0x0B00, 1), { true,  nullptr,                 "DOS - GET STDIN STATUS" } },
	{ MAKE_INT_SEL(0x21, 0x0D00, 1), { true,  nullptr,                 "DOS - DISK RESET" } },
	{ MAKE_INT_SEL(0x21, 0x0E00, 1), { true,  &CPUDebugger::INT_21_0E, "DOS - SELECT DEFAULT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x1900, 1), { true,  nullptr,                 "DOS - GET CURRENT DEFAULT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x1A00, 1), { true,  nullptr,                 "DOS - SET DISK TRANSFER AREA ADDRESS" } },
	{ MAKE_INT_SEL(0x21, 0x2100, 1), { true,  nullptr,                 "DOS - READ RANDOM RECORD FROM FCB FILE" } },
	{ MAKE_INT_SEL(0x21, 0x2500, 1), { true,  &CPUDebugger::INT_21_25, "DOS - SET INTERRUPT VECTOR" } },
	{ MAKE_INT_SEL(0x21, 0x2900, 1), { true,  nullptr,                 "DOS - PARSE FILENAME INTO FCB" } },
	{ MAKE_INT_SEL(0x21, 0x2A00, 1), { true,  nullptr,                 "DOS - GET SYSTEM DATE" } },
	{ MAKE_INT_SEL(0x21, 0x2C00, 1), { false, &CPUDebugger::INT_21_2C, "DOS - GET SYSTEM TIME" } },
	{ MAKE_INT_SEL(0x21, 0x3000, 1), { true,  &CPUDebugger::INT_21_30, "DOS - GET DOS VERSION" } },
	{ MAKE_INT_SEL(0x21, 0x3100, 1), { true,  nullptr,                 "DOS - TERMINATE AND STAY RESIDENT" } },
	{ MAKE_INT_SEL(0x21, 0x3200, 1), { true,  &CPUDebugger::INT_21_32, "DOS - GET DOS DRIVE PARAMETER BLOCK FOR SPECIFIC DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x3300, 2), { false, nullptr,                 "DOS - EXTENDED BREAK CHECKING (0)" } },
	{ MAKE_INT_SEL(0x21, 0x3301, 2), { false, nullptr,                 "DOS - EXTENDED BREAK CHECKING (1)" } },
	{ MAKE_INT_SEL(0x21, 0x3302, 2), { false, nullptr,                 "DOS - GET AND SET EXTENDED CONTROL-BREAK CHECKING STATE" } },
	{ MAKE_INT_SEL(0x21, 0x3303, 2), { false, nullptr,                 "DOS - GET CURRENT CPSW STATE" } },
	{ MAKE_INT_SEL(0x21, 0x3304, 2), { false, nullptr,                 "DOS - SET CPSW STATE" } },
	{ MAKE_INT_SEL(0x21, 0x3305, 2), { true,  nullptr,                 "DOS - GET BOOT DRIVE" } },
	{ MAKE_INT_SEL(0x21, 0x3306, 2), { true,  nullptr,                 "DOS - GET TRUE VERSION NUMBER" } },
	{ MAKE_INT_SEL(0x21, 0x3400, 1), { false, nullptr,                 "DOS - GET ADDRESS OF INDOS FLAG" } },
	{ MAKE_INT_SEL(0x21, 0x3500, 1), { false, nullptr,                 "DOS - GET INTERRUPT VECTOR" } },
	{ MAKE_INT_SEL(0x21, 0x3600, 1), { true,  &CPUDebugger::INT_21_36, "DOS - GET FREE DISK SPACE" } },
	{ MAKE_INT_SEL(0x21, 0x3700, 2), { true,  nullptr,                 "DOS - GET SWITCH CHARACTER" } },
	{ MAKE_INT_SEL(0x21, 0x3701, 2), { true,  nullptr,                 "DOS - SET SWITCH CHARACTER" } },
	{ MAKE_INT_SEL(0x21, 0x3800, 1), { true,  nullptr,                 "DOS - GET COUNTRY-SPECIFIC INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x3900, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - MKDIR" } },
	{ MAKE_INT_SEL(0x21, 0x3A00, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - RMDIR" } },
	{ MAKE_INT_SEL(0x21, 0x3B00, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - CHDIR" } },
	{ MAKE_INT_SEL(0x21, 0x3D00, 1), { true,  &CPUDebugger::INT_21_3D, "DOS - FILE OPEN" } },
	{ MAKE_INT_SEL(0x21, 0x3E00, 1), { true,  &CPUDebugger::INT_21_3E, "DOS - FILE CLOSE" } },
	{ MAKE_INT_SEL(0x21, 0x3F00, 1), { true,  &CPUDebugger::INT_21_3F, "DOS - FILE READ" } },
	{ MAKE_INT_SEL(0x21, 0x4000, 1), { true,  &CPUDebugger::INT_21_40, "DOS - FILE WRITE" } },
	{ MAKE_INT_SEL(0x21, 0x4100, 1), { true,  nullptr,                 "DOS - FILE UNLINK" } },
	{ MAKE_INT_SEL(0x21, 0x4200, 1), { true,  &CPUDebugger::INT_21_42, "DOS - FILE SEEK" } },
	{ MAKE_INT_SEL(0x21, 0x4300, 2), { true,  &CPUDebugger::INT_21_43, "DOS - GET FILE ATTRIBUTES" } },
	{ MAKE_INT_SEL(0x21, 0x4400, 2), { true,  nullptr,                 "DOS - GET DEVICE INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x4401, 2), { true,  nullptr,                 "DOS - SET DEVICE INFORMATION" } },
	{ MAKE_INT_SEL(0x21, 0x4405, 2), { true,  nullptr,                 "DOS - IOCTL - WRITE TO BLOCK DEVICE CONTROL CHANNEL" } },
	{ MAKE_INT_SEL(0x21, 0x4408, 2), { true,  nullptr,                 "DOS - IOCTL - CHECK IF BLOCK DEVICE REMOVABLE" } },
	{ MAKE_INT_SEL(0x21, 0x4409, 2), { true,  nullptr,                 "DOS - IOCTL - CHECK IF BLOCK DEVICE REMOTE" } },
	{ MAKE_INT_SEL(0x21, 0x440A, 2), { false, nullptr,                 "DOS - IOCTL - CHECK IF HANDLE IS REMOTE" } },
	{ MAKE_INT_SEL(0x21, 0x440B, 2), { false, nullptr,                 "DOS - IOCTL - SET SHARING RETRY COUNT" } },
	{ MAKE_INT_SEL(0x21, 0x440C, 2), { false, nullptr,                 "DOS - IOCTL - GENERIC CHARACTER DEVICE REQUEST" } },
	{ MAKE_INT_SEL(0x21, 0x440D, 2), { true,  &CPUDebugger::INT_21_440D,"DOS - IOCTL - GENERIC BLOCK DEVICE REQUEST" } },
	{ MAKE_INT_SEL(0x21, 0x440E, 2), { true,  nullptr,                 "DOS - IOCTL - GET LOGICAL DRIVE MAP" } },
	{ MAKE_INT_SEL(0x21, 0x440F, 2), { true,  nullptr,                 "DOS - IOCTL - SET LOGICAL DRIVE MAP" } },
	{ MAKE_INT_SEL(0x21, 0x4500, 1), { true,  nullptr,                 "DOS - DUP - DUPLICATE FILE HANDLE" } },
	{ MAKE_INT_SEL(0x21, 0x4700, 1), { true,  nullptr,                 "DOS - CWD - GET CURRENT DIRECTORY" } },
	{ MAKE_INT_SEL(0x21, 0x4800, 1), { true,  &CPUDebugger::INT_21_48, "DOS - ALLOCATE MEMORY" } },
	{ MAKE_INT_SEL(0x21, 0x4900, 1), { true,  nullptr,                 "DOS - FREE MEMORY" } },
	{ MAKE_INT_SEL(0x21, 0x4A00, 1), { true,  &CPUDebugger::INT_21_4A, "DOS - RESIZE MEMORY BLOCK" } },
	{ MAKE_INT_SEL(0x21, 0x4B00, 1), { true,  &CPUDebugger::INT_21_4B, "DOS - EXEC" } },
	{ MAKE_INT_SEL(0x21, 0x4C00, 1), { true,  nullptr,                 "DOS - EXIT - TERMINATE WITH RETURN CODE" } },
	{ MAKE_INT_SEL(0x21, 0x4D00, 1), { true,  nullptr,                 "DOS - GET RETURN CODE (ERRORLEVEL)" } },
	{ MAKE_INT_SEL(0x21, 0x4E00, 1), { true,  &CPUDebugger::INT_21_39_A_B_4E, "DOS - FINDFIRST" } },
	{ MAKE_INT_SEL(0x21, 0x5000, 1), { true,  nullptr,                 "DOS - SET CURRENT PROCESS ID" } },
	{ MAKE_INT_SEL(0x21, 0x5200, 1), { false, nullptr,                 "DOS - GET LIST OF LISTS" } },
	{ MAKE_INT_SEL(0x21, 0x5700, 2), { true,  nullptr,                 "DOS - GET FILE'S LAST-WRITTEN DATE AND TIME" } },
	{ MAKE_INT_SEL(0x21, 0x5701, 2), { true,  nullptr,                 "DOS - SET FILE'S LAST-WRITTEN DATE AND TIME" } },
	{ MAKE_INT_SEL(0x21, 0x5800, 1), { true,  nullptr,                 "DOS - GET OR SET MEMORY ALLOCATION STRATEGY" } },
	{ MAKE_INT_SEL(0x21, 0x5D08, 2), { false, nullptr,                 "DOS NET - SET REDIRECTED PRINTER MODE" } },
	{ MAKE_INT_SEL(0x21, 0x5D09, 2), { false, nullptr,                 "DOS NET - FLUSH REDIRECTED PRINTER OUTPUT" } },
	{ MAKE_INT_SEL(0x21, 0x5F02, 2), { true,  nullptr,                 "DOS NET - GET REDIRECTION LIST ENTRY" } },
	{ MAKE_INT_SEL(0x21, 0x5F03, 2), { true,  &CPUDebugger::INT_21_5F03,"DOS NET - REDIRECT DEVICE" } },
	{ MAKE_INT_SEL(0x21, 0x6300, 2), { false, nullptr,                 "DOS - GET DOUBLE BYTE CHARACTER SET LEAD-BYTE TABLE" } },
	{ MAKE_INT_SEL(0x21, 0x6601, 2), { false, nullptr,                 "DOS - GET GLOBAL CODE PAGE TABLE" } },
	{ MAKE_INT_SEL(0x21, 0x6602, 2), { false, nullptr,                 "DOS - SET GLOBAL CODE PAGE TABLE" } },
	{ MAKE_INT_SEL(0x21, 0x6C00, 2), { true,  nullptr,                 "DOS - EXTENDED OPEN/CREATE" } },
	/* INT 28 */
	{ MAKE_INT_SEL(0x28, 0x0000, 0), { false, nullptr,                 "DOS - IDLE INTERRUPT" } },
	/* INT 29 */
	{ MAKE_INT_SEL(0x29, 0x0000, 0), { false, &CPUDebugger::INT_10,    "DOS - FAST CONSOLE OUTPUT" } },
	/* INT 2A */
	{ MAKE_INT_SEL(0x2A, 0x8100, 1), { false, nullptr,                 "DOS NET - END CRITICAL SECTION" } },
	{ MAKE_INT_SEL(0x2A, 0x8200, 1), { false, nullptr,                 "DOS NET - END CRITICAL SECTIONS 0-7" } },
	/* INT 2B */
	{ MAKE_INT_SEL(0x2B, 0x0000, 1), { true,  nullptr,                 "IBM - RAM LOADER - fn0" } },
	{ MAKE_INT_SEL(0x2B, 0x0100, 1), { true,  &CPUDebugger::INT_2B_01, "IBM - RAM LOADER - FIND FILE IN ROMDRV" } },
	{ MAKE_INT_SEL(0x2B, 0x0200, 1), { true,  nullptr,                 "IBM - RAM LOADER - COPY FILE FROM ROMDRV" } },
	{ MAKE_INT_SEL(0x2B, 0x0300, 1), { true,  nullptr,                 "IBM - RAM LOADER - fn3" } },
	/* INT 2F */
	{ MAKE_INT_SEL(0x2F, 0x1106, 2), { true,  nullptr,                 "NET REDIR - CLOSE REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1108, 2), { true,  nullptr,                 "NET REDIR - READ FROM REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x1116, 2), { true,  &CPUDebugger::INT_2F_1116,"NET REDIR - OPEN EXISTING REMOTE FILE" } },
	{ MAKE_INT_SEL(0x2F, 0x111D, 2), { true,  nullptr,                 "NET REDIR - CLOSE ALL REMOTE FILES FOR PROCESS (ABORT)" } },
	{ MAKE_INT_SEL(0x2F, 0x111E, 2), { true,  nullptr,                 "NET REDIR - DO REDIRECTION" } },
	{ MAKE_INT_SEL(0x2F, 0x1120, 2), { true,  nullptr,                 "NET REDIR - FLUSH ALL DISK BUFFERS" } },
	{ MAKE_INT_SEL(0x2F, 0x1122, 2), { true,  nullptr,                 "NET REDIR - PROCESS TERMINATION HOOK" } },
	{ MAKE_INT_SEL(0x2F, 0x1125, 2), { true,  nullptr,                 "NET REDIR - REDIRECTED PRINTER MODE" } },
	{ MAKE_INT_SEL(0x2F, 0x1123, 2), { true,  &CPUDebugger::INT_2F_1123,"NET REDIR - QUALIFY REMOTE FILENAME" } },
	{ MAKE_INT_SEL(0x2F, 0x1208, 2), { true,  nullptr,                 "DOS - DECREMENT SFT REFERENCE COUNT" } },
	{ MAKE_INT_SEL(0x2F, 0x120C, 2), { true,  nullptr,                 "DOS - OPEN DEVICE AND SET SFT OWNER/MODE" } },
	{ MAKE_INT_SEL(0x2F, 0x1217, 2), { true,  nullptr,                 "DOS - GET CURRENT DIR STRUCTURE FOR DRIVE" } },
	{ MAKE_INT_SEL(0x2F, 0x122E, 2), { true,  nullptr,                 "DOS - GET OR SET ERROR TABLE ADDRESSES" } },
	{ MAKE_INT_SEL(0x2F, 0x122F, 2), { true,  nullptr,                 "DOS - SET DOS VERSION NUMBER TO RETURN" } },
	{ MAKE_INT_SEL(0x2F, 0x1230, 2), { true,  nullptr,                 "W95 - FIND SFT ENTRY IN INTERNAL FILE TABLES" } },
	{ MAKE_INT_SEL(0x2F, 0x1902, 2), { true,  nullptr,                 "SHELLB.COM - COMMAND.COM INTERFACE" } },
	{ MAKE_INT_SEL(0x2F, 0x1980, 2), { true,  nullptr,                 "IBM ROM-DOS v4.0 - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0x1981, 2), { true,  nullptr,                 "IBM ROM-DOS v4.0 - GET ??? STRING" } },
	{ MAKE_INT_SEL(0x2F, 0x1982, 2), { true,  nullptr,                 "IBM ROM-DOS v4.0 - GET ??? TABLE" } },
	{ MAKE_INT_SEL(0x2F, 0x1A01, 2), { true,  nullptr,                 "DOS 4.0+ ANSI.SYS internal - GET/SET DISPLAY INFORMATION" } },
	{ MAKE_INT_SEL(0x2F, 0x1A02, 2), { true,  nullptr,                 "DOS 4.0+ ANSI.SYS internal - MISCELLANEOUS REQUESTS" } },
	{ MAKE_INT_SEL(0x2F, 0xAE00, 2), { true,  nullptr,                 "DOS - INSTALLABLE COMMAND - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xB000, 2), { true,  nullptr,                 "DOS 3.3+ GRAFTABL.COM - INSTALLATION CHECK" } },
	{ MAKE_INT_SEL(0x2F, 0xB711, 2), { true,  nullptr,                 "DOS - SET RETURN FOUND NAME STATE" } },
	/* INT 33 */
	{ MAKE_INT_SEL(0x33, 0x0000, 2), { true,  nullptr,                 "MS MOUSE - RESET DRIVER AND READ STATUS" } },
	{ MAKE_INT_SEL(0x33, 0x0001, 2), { true,  nullptr,                 "MS MOUSE - SHOW MOUSE CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x0002, 2), { true,  nullptr,                 "MS MOUSE - HIDE MOUSE CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x0003, 2), { true,  nullptr,                 "MS MOUSE - RETURN POSITION AND BUTTON STATUS" } },
	{ MAKE_INT_SEL(0x33, 0x0007, 2), { true,  nullptr,                 "MS MOUSE - DEFINE HORIZONTAL CURSOR RANGE" } },
	{ MAKE_INT_SEL(0x33, 0x0008, 2), { true,  nullptr,                 "MS MOUSE - DEFINE VERTICAL CURSOR RANGE" } },
	{ MAKE_INT_SEL(0x33, 0x0009, 2), { true,  nullptr,                 "MS MOUSE - DEFINE GRAPHICS CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x000A, 2), { true,  nullptr,                 "MS MOUSE - DEFINE TEXT CURSOR" } },
	{ MAKE_INT_SEL(0x33, 0x000C, 2), { true,  nullptr,                 "MS MOUSE - DEFINE INTERRUPT SUBROUTINE PARAMETERS" } },
	{ MAKE_INT_SEL(0x33, 0x0021, 2), { true,  nullptr,                 "MS MOUSE - SOFTWARE RESET" } },
	{ MAKE_INT_SEL(0x33, 0x0024, 2), { true,  nullptr,                 "MS MOUSE - GET SOFTWARE VERSION, MOUSE TYPE, AND IRQ NUMBER" } },
	{ MAKE_INT_SEL(0x33, 0x0026, 2), { true,  nullptr,                 "MS MOUSE - GET MAXIMUM VIRTUAL COORDINATES" } },
	{ MAKE_INT_SEL(0x33, 0x006D, 2), { true,  nullptr,                 "MS MOUSE - GET VERSION STRING" } },
	/* INT 40 */
	{ MAKE_INT_SEL(0x40, 0x0000, 0), { true,  nullptr,                 "DISKETTE - ROM BIOS DISKETTE HANDLER RELOCATED BY HARD DISK BIOS" } }
};
